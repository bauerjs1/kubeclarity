// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetVulnerabilitiesParams creates a new GetVulnerabilitiesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetVulnerabilitiesParams() *GetVulnerabilitiesParams {
	return &GetVulnerabilitiesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetVulnerabilitiesParamsWithTimeout creates a new GetVulnerabilitiesParams object
// with the ability to set a timeout on a request.
func NewGetVulnerabilitiesParamsWithTimeout(timeout time.Duration) *GetVulnerabilitiesParams {
	return &GetVulnerabilitiesParams{
		timeout: timeout,
	}
}

// NewGetVulnerabilitiesParamsWithContext creates a new GetVulnerabilitiesParams object
// with the ability to set a context for a request.
func NewGetVulnerabilitiesParamsWithContext(ctx context.Context) *GetVulnerabilitiesParams {
	return &GetVulnerabilitiesParams{
		Context: ctx,
	}
}

// NewGetVulnerabilitiesParamsWithHTTPClient creates a new GetVulnerabilitiesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetVulnerabilitiesParamsWithHTTPClient(client *http.Client) *GetVulnerabilitiesParams {
	return &GetVulnerabilitiesParams{
		HTTPClient: client,
	}
}

/*
GetVulnerabilitiesParams contains all the parameters to send to the API endpoint

	for the get vulnerabilities operation.

	Typically these are written to a http.Request.
*/
type GetVulnerabilitiesParams struct {

	/* ApplicationID.

	   application ID system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	ApplicationID *string

	/* ApplicationResourceID.

	   application resource ID system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	ApplicationResourceID *string

	/* ApplicationResourcesGte.

	   greater than or equal
	*/
	ApplicationResourcesGte *int64

	// ApplicationResourcesIsNot.
	ApplicationResourcesIsNot []int64

	// ApplicationResourcesIs.
	ApplicationResourcesIs []int64

	/* ApplicationResourcesLte.

	   less than or equal
	*/
	ApplicationResourcesLte *int64

	/* ApplicationsGte.

	   greater than or equal
	*/
	ApplicationsGte *int64

	// ApplicationsIsNot.
	ApplicationsIsNot []int64

	// ApplicationsIs.
	ApplicationsIs []int64

	/* ApplicationsLte.

	   less than or equal
	*/
	ApplicationsLte *int64

	/* CurrentRuntimeScan.

	   current runtime scan system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	CurrentRuntimeScan *bool

	// HasFixVersionIs.
	HasFixVersionIs *bool

	// PackageNameContains.
	PackageNameContains []string

	// PackageNameEnd.
	PackageNameEnd *string

	// PackageNameIsNot.
	PackageNameIsNot []string

	// PackageNameIs.
	PackageNameIs []string

	// PackageNameStart.
	PackageNameStart *string

	// PackageVersionContains.
	PackageVersionContains []string

	// PackageVersionEnd.
	PackageVersionEnd *string

	// PackageVersionIsNot.
	PackageVersionIsNot []string

	// PackageVersionIs.
	PackageVersionIs []string

	// PackageVersionStart.
	PackageVersionStart *string

	/* Page.

	   Page number of the query
	*/
	Page int64

	/* PageSize.

	   Maximum items to return
	*/
	PageSize int64

	// ReportingScannersContainElements.
	ReportingScannersContainElements []string

	// ReportingScannersDoesntContainElements.
	ReportingScannersDoesntContainElements []string

	/* SortDir.

	   Sorting direction

	   Default: "ASC"
	*/
	SortDir *string

	/* SortKey.

	   Sort key
	*/
	SortKey string

	// VulnerabilityNameContains.
	VulnerabilityNameContains []string

	// VulnerabilityNameEnd.
	VulnerabilityNameEnd *string

	// VulnerabilityNameIsNot.
	VulnerabilityNameIsNot []string

	// VulnerabilityNameIs.
	VulnerabilityNameIs []string

	// VulnerabilityNameStart.
	VulnerabilityNameStart *string

	// VulnerabilitySeverityGte.
	VulnerabilitySeverityGte *string

	// VulnerabilitySeverityIsNot.
	VulnerabilitySeverityIsNot []string

	// VulnerabilitySeverityIs.
	VulnerabilitySeverityIs []string

	// VulnerabilitySeverityLte.
	VulnerabilitySeverityLte *string

	// VulnerabilitySourceIs.
	VulnerabilitySourceIs []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get vulnerabilities params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVulnerabilitiesParams) WithDefaults() *GetVulnerabilitiesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get vulnerabilities params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVulnerabilitiesParams) SetDefaults() {
	var (
		sortDirDefault = string("ASC")
	)

	val := GetVulnerabilitiesParams{
		SortDir: &sortDirDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithTimeout(timeout time.Duration) *GetVulnerabilitiesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithContext(ctx context.Context) *GetVulnerabilitiesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithHTTPClient(client *http.Client) *GetVulnerabilitiesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithApplicationID(applicationID *string) *GetVulnerabilitiesParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetApplicationID(applicationID *string) {
	o.ApplicationID = applicationID
}

// WithApplicationResourceID adds the applicationResourceID to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithApplicationResourceID(applicationResourceID *string) *GetVulnerabilitiesParams {
	o.SetApplicationResourceID(applicationResourceID)
	return o
}

// SetApplicationResourceID adds the applicationResourceId to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetApplicationResourceID(applicationResourceID *string) {
	o.ApplicationResourceID = applicationResourceID
}

// WithApplicationResourcesGte adds the applicationResourcesGte to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithApplicationResourcesGte(applicationResourcesGte *int64) *GetVulnerabilitiesParams {
	o.SetApplicationResourcesGte(applicationResourcesGte)
	return o
}

// SetApplicationResourcesGte adds the applicationResourcesGte to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetApplicationResourcesGte(applicationResourcesGte *int64) {
	o.ApplicationResourcesGte = applicationResourcesGte
}

// WithApplicationResourcesIsNot adds the applicationResourcesIsNot to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithApplicationResourcesIsNot(applicationResourcesIsNot []int64) *GetVulnerabilitiesParams {
	o.SetApplicationResourcesIsNot(applicationResourcesIsNot)
	return o
}

// SetApplicationResourcesIsNot adds the applicationResourcesIsNot to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetApplicationResourcesIsNot(applicationResourcesIsNot []int64) {
	o.ApplicationResourcesIsNot = applicationResourcesIsNot
}

// WithApplicationResourcesIs adds the applicationResourcesIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithApplicationResourcesIs(applicationResourcesIs []int64) *GetVulnerabilitiesParams {
	o.SetApplicationResourcesIs(applicationResourcesIs)
	return o
}

// SetApplicationResourcesIs adds the applicationResourcesIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetApplicationResourcesIs(applicationResourcesIs []int64) {
	o.ApplicationResourcesIs = applicationResourcesIs
}

// WithApplicationResourcesLte adds the applicationResourcesLte to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithApplicationResourcesLte(applicationResourcesLte *int64) *GetVulnerabilitiesParams {
	o.SetApplicationResourcesLte(applicationResourcesLte)
	return o
}

// SetApplicationResourcesLte adds the applicationResourcesLte to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetApplicationResourcesLte(applicationResourcesLte *int64) {
	o.ApplicationResourcesLte = applicationResourcesLte
}

// WithApplicationsGte adds the applicationsGte to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithApplicationsGte(applicationsGte *int64) *GetVulnerabilitiesParams {
	o.SetApplicationsGte(applicationsGte)
	return o
}

// SetApplicationsGte adds the applicationsGte to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetApplicationsGte(applicationsGte *int64) {
	o.ApplicationsGte = applicationsGte
}

// WithApplicationsIsNot adds the applicationsIsNot to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithApplicationsIsNot(applicationsIsNot []int64) *GetVulnerabilitiesParams {
	o.SetApplicationsIsNot(applicationsIsNot)
	return o
}

// SetApplicationsIsNot adds the applicationsIsNot to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetApplicationsIsNot(applicationsIsNot []int64) {
	o.ApplicationsIsNot = applicationsIsNot
}

// WithApplicationsIs adds the applicationsIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithApplicationsIs(applicationsIs []int64) *GetVulnerabilitiesParams {
	o.SetApplicationsIs(applicationsIs)
	return o
}

// SetApplicationsIs adds the applicationsIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetApplicationsIs(applicationsIs []int64) {
	o.ApplicationsIs = applicationsIs
}

// WithApplicationsLte adds the applicationsLte to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithApplicationsLte(applicationsLte *int64) *GetVulnerabilitiesParams {
	o.SetApplicationsLte(applicationsLte)
	return o
}

// SetApplicationsLte adds the applicationsLte to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetApplicationsLte(applicationsLte *int64) {
	o.ApplicationsLte = applicationsLte
}

// WithCurrentRuntimeScan adds the currentRuntimeScan to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithCurrentRuntimeScan(currentRuntimeScan *bool) *GetVulnerabilitiesParams {
	o.SetCurrentRuntimeScan(currentRuntimeScan)
	return o
}

// SetCurrentRuntimeScan adds the currentRuntimeScan to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetCurrentRuntimeScan(currentRuntimeScan *bool) {
	o.CurrentRuntimeScan = currentRuntimeScan
}

// WithHasFixVersionIs adds the hasFixVersionIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithHasFixVersionIs(hasFixVersionIs *bool) *GetVulnerabilitiesParams {
	o.SetHasFixVersionIs(hasFixVersionIs)
	return o
}

// SetHasFixVersionIs adds the hasFixVersionIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetHasFixVersionIs(hasFixVersionIs *bool) {
	o.HasFixVersionIs = hasFixVersionIs
}

// WithPackageNameContains adds the packageNameContains to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithPackageNameContains(packageNameContains []string) *GetVulnerabilitiesParams {
	o.SetPackageNameContains(packageNameContains)
	return o
}

// SetPackageNameContains adds the packageNameContains to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetPackageNameContains(packageNameContains []string) {
	o.PackageNameContains = packageNameContains
}

// WithPackageNameEnd adds the packageNameEnd to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithPackageNameEnd(packageNameEnd *string) *GetVulnerabilitiesParams {
	o.SetPackageNameEnd(packageNameEnd)
	return o
}

// SetPackageNameEnd adds the packageNameEnd to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetPackageNameEnd(packageNameEnd *string) {
	o.PackageNameEnd = packageNameEnd
}

// WithPackageNameIsNot adds the packageNameIsNot to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithPackageNameIsNot(packageNameIsNot []string) *GetVulnerabilitiesParams {
	o.SetPackageNameIsNot(packageNameIsNot)
	return o
}

// SetPackageNameIsNot adds the packageNameIsNot to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetPackageNameIsNot(packageNameIsNot []string) {
	o.PackageNameIsNot = packageNameIsNot
}

// WithPackageNameIs adds the packageNameIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithPackageNameIs(packageNameIs []string) *GetVulnerabilitiesParams {
	o.SetPackageNameIs(packageNameIs)
	return o
}

// SetPackageNameIs adds the packageNameIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetPackageNameIs(packageNameIs []string) {
	o.PackageNameIs = packageNameIs
}

// WithPackageNameStart adds the packageNameStart to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithPackageNameStart(packageNameStart *string) *GetVulnerabilitiesParams {
	o.SetPackageNameStart(packageNameStart)
	return o
}

// SetPackageNameStart adds the packageNameStart to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetPackageNameStart(packageNameStart *string) {
	o.PackageNameStart = packageNameStart
}

// WithPackageVersionContains adds the packageVersionContains to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithPackageVersionContains(packageVersionContains []string) *GetVulnerabilitiesParams {
	o.SetPackageVersionContains(packageVersionContains)
	return o
}

// SetPackageVersionContains adds the packageVersionContains to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetPackageVersionContains(packageVersionContains []string) {
	o.PackageVersionContains = packageVersionContains
}

// WithPackageVersionEnd adds the packageVersionEnd to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithPackageVersionEnd(packageVersionEnd *string) *GetVulnerabilitiesParams {
	o.SetPackageVersionEnd(packageVersionEnd)
	return o
}

// SetPackageVersionEnd adds the packageVersionEnd to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetPackageVersionEnd(packageVersionEnd *string) {
	o.PackageVersionEnd = packageVersionEnd
}

// WithPackageVersionIsNot adds the packageVersionIsNot to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithPackageVersionIsNot(packageVersionIsNot []string) *GetVulnerabilitiesParams {
	o.SetPackageVersionIsNot(packageVersionIsNot)
	return o
}

// SetPackageVersionIsNot adds the packageVersionIsNot to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetPackageVersionIsNot(packageVersionIsNot []string) {
	o.PackageVersionIsNot = packageVersionIsNot
}

// WithPackageVersionIs adds the packageVersionIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithPackageVersionIs(packageVersionIs []string) *GetVulnerabilitiesParams {
	o.SetPackageVersionIs(packageVersionIs)
	return o
}

// SetPackageVersionIs adds the packageVersionIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetPackageVersionIs(packageVersionIs []string) {
	o.PackageVersionIs = packageVersionIs
}

// WithPackageVersionStart adds the packageVersionStart to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithPackageVersionStart(packageVersionStart *string) *GetVulnerabilitiesParams {
	o.SetPackageVersionStart(packageVersionStart)
	return o
}

// SetPackageVersionStart adds the packageVersionStart to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetPackageVersionStart(packageVersionStart *string) {
	o.PackageVersionStart = packageVersionStart
}

// WithPage adds the page to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithPage(page int64) *GetVulnerabilitiesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetPage(page int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithPageSize(pageSize int64) *GetVulnerabilitiesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetPageSize(pageSize int64) {
	o.PageSize = pageSize
}

// WithReportingScannersContainElements adds the reportingScannersContainElements to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithReportingScannersContainElements(reportingScannersContainElements []string) *GetVulnerabilitiesParams {
	o.SetReportingScannersContainElements(reportingScannersContainElements)
	return o
}

// SetReportingScannersContainElements adds the reportingScannersContainElements to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetReportingScannersContainElements(reportingScannersContainElements []string) {
	o.ReportingScannersContainElements = reportingScannersContainElements
}

// WithReportingScannersDoesntContainElements adds the reportingScannersDoesntContainElements to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithReportingScannersDoesntContainElements(reportingScannersDoesntContainElements []string) *GetVulnerabilitiesParams {
	o.SetReportingScannersDoesntContainElements(reportingScannersDoesntContainElements)
	return o
}

// SetReportingScannersDoesntContainElements adds the reportingScannersDoesntContainElements to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetReportingScannersDoesntContainElements(reportingScannersDoesntContainElements []string) {
	o.ReportingScannersDoesntContainElements = reportingScannersDoesntContainElements
}

// WithSortDir adds the sortDir to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithSortDir(sortDir *string) *GetVulnerabilitiesParams {
	o.SetSortDir(sortDir)
	return o
}

// SetSortDir adds the sortDir to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetSortDir(sortDir *string) {
	o.SortDir = sortDir
}

// WithSortKey adds the sortKey to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithSortKey(sortKey string) *GetVulnerabilitiesParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetSortKey(sortKey string) {
	o.SortKey = sortKey
}

// WithVulnerabilityNameContains adds the vulnerabilityNameContains to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithVulnerabilityNameContains(vulnerabilityNameContains []string) *GetVulnerabilitiesParams {
	o.SetVulnerabilityNameContains(vulnerabilityNameContains)
	return o
}

// SetVulnerabilityNameContains adds the vulnerabilityNameContains to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetVulnerabilityNameContains(vulnerabilityNameContains []string) {
	o.VulnerabilityNameContains = vulnerabilityNameContains
}

// WithVulnerabilityNameEnd adds the vulnerabilityNameEnd to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithVulnerabilityNameEnd(vulnerabilityNameEnd *string) *GetVulnerabilitiesParams {
	o.SetVulnerabilityNameEnd(vulnerabilityNameEnd)
	return o
}

// SetVulnerabilityNameEnd adds the vulnerabilityNameEnd to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetVulnerabilityNameEnd(vulnerabilityNameEnd *string) {
	o.VulnerabilityNameEnd = vulnerabilityNameEnd
}

// WithVulnerabilityNameIsNot adds the vulnerabilityNameIsNot to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithVulnerabilityNameIsNot(vulnerabilityNameIsNot []string) *GetVulnerabilitiesParams {
	o.SetVulnerabilityNameIsNot(vulnerabilityNameIsNot)
	return o
}

// SetVulnerabilityNameIsNot adds the vulnerabilityNameIsNot to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetVulnerabilityNameIsNot(vulnerabilityNameIsNot []string) {
	o.VulnerabilityNameIsNot = vulnerabilityNameIsNot
}

// WithVulnerabilityNameIs adds the vulnerabilityNameIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithVulnerabilityNameIs(vulnerabilityNameIs []string) *GetVulnerabilitiesParams {
	o.SetVulnerabilityNameIs(vulnerabilityNameIs)
	return o
}

// SetVulnerabilityNameIs adds the vulnerabilityNameIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetVulnerabilityNameIs(vulnerabilityNameIs []string) {
	o.VulnerabilityNameIs = vulnerabilityNameIs
}

// WithVulnerabilityNameStart adds the vulnerabilityNameStart to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithVulnerabilityNameStart(vulnerabilityNameStart *string) *GetVulnerabilitiesParams {
	o.SetVulnerabilityNameStart(vulnerabilityNameStart)
	return o
}

// SetVulnerabilityNameStart adds the vulnerabilityNameStart to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetVulnerabilityNameStart(vulnerabilityNameStart *string) {
	o.VulnerabilityNameStart = vulnerabilityNameStart
}

// WithVulnerabilitySeverityGte adds the vulnerabilitySeverityGte to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithVulnerabilitySeverityGte(vulnerabilitySeverityGte *string) *GetVulnerabilitiesParams {
	o.SetVulnerabilitySeverityGte(vulnerabilitySeverityGte)
	return o
}

// SetVulnerabilitySeverityGte adds the vulnerabilitySeverityGte to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetVulnerabilitySeverityGte(vulnerabilitySeverityGte *string) {
	o.VulnerabilitySeverityGte = vulnerabilitySeverityGte
}

// WithVulnerabilitySeverityIsNot adds the vulnerabilitySeverityIsNot to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithVulnerabilitySeverityIsNot(vulnerabilitySeverityIsNot []string) *GetVulnerabilitiesParams {
	o.SetVulnerabilitySeverityIsNot(vulnerabilitySeverityIsNot)
	return o
}

// SetVulnerabilitySeverityIsNot adds the vulnerabilitySeverityIsNot to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetVulnerabilitySeverityIsNot(vulnerabilitySeverityIsNot []string) {
	o.VulnerabilitySeverityIsNot = vulnerabilitySeverityIsNot
}

// WithVulnerabilitySeverityIs adds the vulnerabilitySeverityIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithVulnerabilitySeverityIs(vulnerabilitySeverityIs []string) *GetVulnerabilitiesParams {
	o.SetVulnerabilitySeverityIs(vulnerabilitySeverityIs)
	return o
}

// SetVulnerabilitySeverityIs adds the vulnerabilitySeverityIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetVulnerabilitySeverityIs(vulnerabilitySeverityIs []string) {
	o.VulnerabilitySeverityIs = vulnerabilitySeverityIs
}

// WithVulnerabilitySeverityLte adds the vulnerabilitySeverityLte to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithVulnerabilitySeverityLte(vulnerabilitySeverityLte *string) *GetVulnerabilitiesParams {
	o.SetVulnerabilitySeverityLte(vulnerabilitySeverityLte)
	return o
}

// SetVulnerabilitySeverityLte adds the vulnerabilitySeverityLte to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetVulnerabilitySeverityLte(vulnerabilitySeverityLte *string) {
	o.VulnerabilitySeverityLte = vulnerabilitySeverityLte
}

// WithVulnerabilitySourceIs adds the vulnerabilitySourceIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) WithVulnerabilitySourceIs(vulnerabilitySourceIs []string) *GetVulnerabilitiesParams {
	o.SetVulnerabilitySourceIs(vulnerabilitySourceIs)
	return o
}

// SetVulnerabilitySourceIs adds the vulnerabilitySourceIs to the get vulnerabilities params
func (o *GetVulnerabilitiesParams) SetVulnerabilitySourceIs(vulnerabilitySourceIs []string) {
	o.VulnerabilitySourceIs = vulnerabilitySourceIs
}

// WriteToRequest writes these params to a swagger request
func (o *GetVulnerabilitiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApplicationID != nil {

		// query param applicationID
		var qrApplicationID string

		if o.ApplicationID != nil {
			qrApplicationID = *o.ApplicationID
		}
		qApplicationID := qrApplicationID
		if qApplicationID != "" {

			if err := r.SetQueryParam("applicationID", qApplicationID); err != nil {
				return err
			}
		}
	}

	if o.ApplicationResourceID != nil {

		// query param applicationResourceID
		var qrApplicationResourceID string

		if o.ApplicationResourceID != nil {
			qrApplicationResourceID = *o.ApplicationResourceID
		}
		qApplicationResourceID := qrApplicationResourceID
		if qApplicationResourceID != "" {

			if err := r.SetQueryParam("applicationResourceID", qApplicationResourceID); err != nil {
				return err
			}
		}
	}

	if o.ApplicationResourcesGte != nil {

		// query param applicationResources[gte]
		var qrApplicationResourcesGte int64

		if o.ApplicationResourcesGte != nil {
			qrApplicationResourcesGte = *o.ApplicationResourcesGte
		}
		qApplicationResourcesGte := swag.FormatInt64(qrApplicationResourcesGte)
		if qApplicationResourcesGte != "" {

			if err := r.SetQueryParam("applicationResources[gte]", qApplicationResourcesGte); err != nil {
				return err
			}
		}
	}

	if o.ApplicationResourcesIsNot != nil {

		// binding items for applicationResources[isNot]
		joinedApplicationResourcesIsNot := o.bindParamApplicationResourcesIsNot(reg)

		// query array param applicationResources[isNot]
		if err := r.SetQueryParam("applicationResources[isNot]", joinedApplicationResourcesIsNot...); err != nil {
			return err
		}
	}

	if o.ApplicationResourcesIs != nil {

		// binding items for applicationResources[is]
		joinedApplicationResourcesIs := o.bindParamApplicationResourcesIs(reg)

		// query array param applicationResources[is]
		if err := r.SetQueryParam("applicationResources[is]", joinedApplicationResourcesIs...); err != nil {
			return err
		}
	}

	if o.ApplicationResourcesLte != nil {

		// query param applicationResources[lte]
		var qrApplicationResourcesLte int64

		if o.ApplicationResourcesLte != nil {
			qrApplicationResourcesLte = *o.ApplicationResourcesLte
		}
		qApplicationResourcesLte := swag.FormatInt64(qrApplicationResourcesLte)
		if qApplicationResourcesLte != "" {

			if err := r.SetQueryParam("applicationResources[lte]", qApplicationResourcesLte); err != nil {
				return err
			}
		}
	}

	if o.ApplicationsGte != nil {

		// query param applications[gte]
		var qrApplicationsGte int64

		if o.ApplicationsGte != nil {
			qrApplicationsGte = *o.ApplicationsGte
		}
		qApplicationsGte := swag.FormatInt64(qrApplicationsGte)
		if qApplicationsGte != "" {

			if err := r.SetQueryParam("applications[gte]", qApplicationsGte); err != nil {
				return err
			}
		}
	}

	if o.ApplicationsIsNot != nil {

		// binding items for applications[isNot]
		joinedApplicationsIsNot := o.bindParamApplicationsIsNot(reg)

		// query array param applications[isNot]
		if err := r.SetQueryParam("applications[isNot]", joinedApplicationsIsNot...); err != nil {
			return err
		}
	}

	if o.ApplicationsIs != nil {

		// binding items for applications[is]
		joinedApplicationsIs := o.bindParamApplicationsIs(reg)

		// query array param applications[is]
		if err := r.SetQueryParam("applications[is]", joinedApplicationsIs...); err != nil {
			return err
		}
	}

	if o.ApplicationsLte != nil {

		// query param applications[lte]
		var qrApplicationsLte int64

		if o.ApplicationsLte != nil {
			qrApplicationsLte = *o.ApplicationsLte
		}
		qApplicationsLte := swag.FormatInt64(qrApplicationsLte)
		if qApplicationsLte != "" {

			if err := r.SetQueryParam("applications[lte]", qApplicationsLte); err != nil {
				return err
			}
		}
	}

	if o.CurrentRuntimeScan != nil {

		// query param currentRuntimeScan
		var qrCurrentRuntimeScan bool

		if o.CurrentRuntimeScan != nil {
			qrCurrentRuntimeScan = *o.CurrentRuntimeScan
		}
		qCurrentRuntimeScan := swag.FormatBool(qrCurrentRuntimeScan)
		if qCurrentRuntimeScan != "" {

			if err := r.SetQueryParam("currentRuntimeScan", qCurrentRuntimeScan); err != nil {
				return err
			}
		}
	}

	if o.HasFixVersionIs != nil {

		// query param hasFixVersion[is]
		var qrHasFixVersionIs bool

		if o.HasFixVersionIs != nil {
			qrHasFixVersionIs = *o.HasFixVersionIs
		}
		qHasFixVersionIs := swag.FormatBool(qrHasFixVersionIs)
		if qHasFixVersionIs != "" {

			if err := r.SetQueryParam("hasFixVersion[is]", qHasFixVersionIs); err != nil {
				return err
			}
		}
	}

	if o.PackageNameContains != nil {

		// binding items for packageName[contains]
		joinedPackageNameContains := o.bindParamPackageNameContains(reg)

		// query array param packageName[contains]
		if err := r.SetQueryParam("packageName[contains]", joinedPackageNameContains...); err != nil {
			return err
		}
	}

	if o.PackageNameEnd != nil {

		// query param packageName[end]
		var qrPackageNameEnd string

		if o.PackageNameEnd != nil {
			qrPackageNameEnd = *o.PackageNameEnd
		}
		qPackageNameEnd := qrPackageNameEnd
		if qPackageNameEnd != "" {

			if err := r.SetQueryParam("packageName[end]", qPackageNameEnd); err != nil {
				return err
			}
		}
	}

	if o.PackageNameIsNot != nil {

		// binding items for packageName[isNot]
		joinedPackageNameIsNot := o.bindParamPackageNameIsNot(reg)

		// query array param packageName[isNot]
		if err := r.SetQueryParam("packageName[isNot]", joinedPackageNameIsNot...); err != nil {
			return err
		}
	}

	if o.PackageNameIs != nil {

		// binding items for packageName[is]
		joinedPackageNameIs := o.bindParamPackageNameIs(reg)

		// query array param packageName[is]
		if err := r.SetQueryParam("packageName[is]", joinedPackageNameIs...); err != nil {
			return err
		}
	}

	if o.PackageNameStart != nil {

		// query param packageName[start]
		var qrPackageNameStart string

		if o.PackageNameStart != nil {
			qrPackageNameStart = *o.PackageNameStart
		}
		qPackageNameStart := qrPackageNameStart
		if qPackageNameStart != "" {

			if err := r.SetQueryParam("packageName[start]", qPackageNameStart); err != nil {
				return err
			}
		}
	}

	if o.PackageVersionContains != nil {

		// binding items for packageVersion[contains]
		joinedPackageVersionContains := o.bindParamPackageVersionContains(reg)

		// query array param packageVersion[contains]
		if err := r.SetQueryParam("packageVersion[contains]", joinedPackageVersionContains...); err != nil {
			return err
		}
	}

	if o.PackageVersionEnd != nil {

		// query param packageVersion[end]
		var qrPackageVersionEnd string

		if o.PackageVersionEnd != nil {
			qrPackageVersionEnd = *o.PackageVersionEnd
		}
		qPackageVersionEnd := qrPackageVersionEnd
		if qPackageVersionEnd != "" {

			if err := r.SetQueryParam("packageVersion[end]", qPackageVersionEnd); err != nil {
				return err
			}
		}
	}

	if o.PackageVersionIsNot != nil {

		// binding items for packageVersion[isNot]
		joinedPackageVersionIsNot := o.bindParamPackageVersionIsNot(reg)

		// query array param packageVersion[isNot]
		if err := r.SetQueryParam("packageVersion[isNot]", joinedPackageVersionIsNot...); err != nil {
			return err
		}
	}

	if o.PackageVersionIs != nil {

		// binding items for packageVersion[is]
		joinedPackageVersionIs := o.bindParamPackageVersionIs(reg)

		// query array param packageVersion[is]
		if err := r.SetQueryParam("packageVersion[is]", joinedPackageVersionIs...); err != nil {
			return err
		}
	}

	if o.PackageVersionStart != nil {

		// query param packageVersion[start]
		var qrPackageVersionStart string

		if o.PackageVersionStart != nil {
			qrPackageVersionStart = *o.PackageVersionStart
		}
		qPackageVersionStart := qrPackageVersionStart
		if qPackageVersionStart != "" {

			if err := r.SetQueryParam("packageVersion[start]", qPackageVersionStart); err != nil {
				return err
			}
		}
	}

	// query param page
	qrPage := o.Page
	qPage := swag.FormatInt64(qrPage)
	if qPage != "" {

		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param pageSize
	qrPageSize := o.PageSize
	qPageSize := swag.FormatInt64(qrPageSize)
	if qPageSize != "" {

		if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
			return err
		}
	}

	if o.ReportingScannersContainElements != nil {

		// binding items for reportingScanners[containElements]
		joinedReportingScannersContainElements := o.bindParamReportingScannersContainElements(reg)

		// query array param reportingScanners[containElements]
		if err := r.SetQueryParam("reportingScanners[containElements]", joinedReportingScannersContainElements...); err != nil {
			return err
		}
	}

	if o.ReportingScannersDoesntContainElements != nil {

		// binding items for reportingScanners[doesntContainElements]
		joinedReportingScannersDoesntContainElements := o.bindParamReportingScannersDoesntContainElements(reg)

		// query array param reportingScanners[doesntContainElements]
		if err := r.SetQueryParam("reportingScanners[doesntContainElements]", joinedReportingScannersDoesntContainElements...); err != nil {
			return err
		}
	}

	if o.SortDir != nil {

		// query param sortDir
		var qrSortDir string

		if o.SortDir != nil {
			qrSortDir = *o.SortDir
		}
		qSortDir := qrSortDir
		if qSortDir != "" {

			if err := r.SetQueryParam("sortDir", qSortDir); err != nil {
				return err
			}
		}
	}

	// query param sortKey
	qrSortKey := o.SortKey
	qSortKey := qrSortKey
	if qSortKey != "" {

		if err := r.SetQueryParam("sortKey", qSortKey); err != nil {
			return err
		}
	}

	if o.VulnerabilityNameContains != nil {

		// binding items for vulnerabilityName[contains]
		joinedVulnerabilityNameContains := o.bindParamVulnerabilityNameContains(reg)

		// query array param vulnerabilityName[contains]
		if err := r.SetQueryParam("vulnerabilityName[contains]", joinedVulnerabilityNameContains...); err != nil {
			return err
		}
	}

	if o.VulnerabilityNameEnd != nil {

		// query param vulnerabilityName[end]
		var qrVulnerabilityNameEnd string

		if o.VulnerabilityNameEnd != nil {
			qrVulnerabilityNameEnd = *o.VulnerabilityNameEnd
		}
		qVulnerabilityNameEnd := qrVulnerabilityNameEnd
		if qVulnerabilityNameEnd != "" {

			if err := r.SetQueryParam("vulnerabilityName[end]", qVulnerabilityNameEnd); err != nil {
				return err
			}
		}
	}

	if o.VulnerabilityNameIsNot != nil {

		// binding items for vulnerabilityName[isNot]
		joinedVulnerabilityNameIsNot := o.bindParamVulnerabilityNameIsNot(reg)

		// query array param vulnerabilityName[isNot]
		if err := r.SetQueryParam("vulnerabilityName[isNot]", joinedVulnerabilityNameIsNot...); err != nil {
			return err
		}
	}

	if o.VulnerabilityNameIs != nil {

		// binding items for vulnerabilityName[is]
		joinedVulnerabilityNameIs := o.bindParamVulnerabilityNameIs(reg)

		// query array param vulnerabilityName[is]
		if err := r.SetQueryParam("vulnerabilityName[is]", joinedVulnerabilityNameIs...); err != nil {
			return err
		}
	}

	if o.VulnerabilityNameStart != nil {

		// query param vulnerabilityName[start]
		var qrVulnerabilityNameStart string

		if o.VulnerabilityNameStart != nil {
			qrVulnerabilityNameStart = *o.VulnerabilityNameStart
		}
		qVulnerabilityNameStart := qrVulnerabilityNameStart
		if qVulnerabilityNameStart != "" {

			if err := r.SetQueryParam("vulnerabilityName[start]", qVulnerabilityNameStart); err != nil {
				return err
			}
		}
	}

	if o.VulnerabilitySeverityGte != nil {

		// query param vulnerabilitySeverity[gte]
		var qrVulnerabilitySeverityGte string

		if o.VulnerabilitySeverityGte != nil {
			qrVulnerabilitySeverityGte = *o.VulnerabilitySeverityGte
		}
		qVulnerabilitySeverityGte := qrVulnerabilitySeverityGte
		if qVulnerabilitySeverityGte != "" {

			if err := r.SetQueryParam("vulnerabilitySeverity[gte]", qVulnerabilitySeverityGte); err != nil {
				return err
			}
		}
	}

	if o.VulnerabilitySeverityIsNot != nil {

		// binding items for vulnerabilitySeverity[isNot]
		joinedVulnerabilitySeverityIsNot := o.bindParamVulnerabilitySeverityIsNot(reg)

		// query array param vulnerabilitySeverity[isNot]
		if err := r.SetQueryParam("vulnerabilitySeverity[isNot]", joinedVulnerabilitySeverityIsNot...); err != nil {
			return err
		}
	}

	if o.VulnerabilitySeverityIs != nil {

		// binding items for vulnerabilitySeverity[is]
		joinedVulnerabilitySeverityIs := o.bindParamVulnerabilitySeverityIs(reg)

		// query array param vulnerabilitySeverity[is]
		if err := r.SetQueryParam("vulnerabilitySeverity[is]", joinedVulnerabilitySeverityIs...); err != nil {
			return err
		}
	}

	if o.VulnerabilitySeverityLte != nil {

		// query param vulnerabilitySeverity[lte]
		var qrVulnerabilitySeverityLte string

		if o.VulnerabilitySeverityLte != nil {
			qrVulnerabilitySeverityLte = *o.VulnerabilitySeverityLte
		}
		qVulnerabilitySeverityLte := qrVulnerabilitySeverityLte
		if qVulnerabilitySeverityLte != "" {

			if err := r.SetQueryParam("vulnerabilitySeverity[lte]", qVulnerabilitySeverityLte); err != nil {
				return err
			}
		}
	}

	if o.VulnerabilitySourceIs != nil {

		// binding items for vulnerabilitySource[is]
		joinedVulnerabilitySourceIs := o.bindParamVulnerabilitySourceIs(reg)

		// query array param vulnerabilitySource[is]
		if err := r.SetQueryParam("vulnerabilitySource[is]", joinedVulnerabilitySourceIs...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetVulnerabilities binds the parameter applicationResources[isNot]
func (o *GetVulnerabilitiesParams) bindParamApplicationResourcesIsNot(formats strfmt.Registry) []string {
	applicationResourcesIsNotIR := o.ApplicationResourcesIsNot

	var applicationResourcesIsNotIC []string
	for _, applicationResourcesIsNotIIR := range applicationResourcesIsNotIR { // explode []int64

		applicationResourcesIsNotIIV := swag.FormatInt64(applicationResourcesIsNotIIR) // int64 as string
		applicationResourcesIsNotIC = append(applicationResourcesIsNotIC, applicationResourcesIsNotIIV)
	}

	// items.CollectionFormat: ""
	applicationResourcesIsNotIS := swag.JoinByFormat(applicationResourcesIsNotIC, "")

	return applicationResourcesIsNotIS
}

// bindParamGetVulnerabilities binds the parameter applicationResources[is]
func (o *GetVulnerabilitiesParams) bindParamApplicationResourcesIs(formats strfmt.Registry) []string {
	applicationResourcesIsIR := o.ApplicationResourcesIs

	var applicationResourcesIsIC []string
	for _, applicationResourcesIsIIR := range applicationResourcesIsIR { // explode []int64

		applicationResourcesIsIIV := swag.FormatInt64(applicationResourcesIsIIR) // int64 as string
		applicationResourcesIsIC = append(applicationResourcesIsIC, applicationResourcesIsIIV)
	}

	// items.CollectionFormat: ""
	applicationResourcesIsIS := swag.JoinByFormat(applicationResourcesIsIC, "")

	return applicationResourcesIsIS
}

// bindParamGetVulnerabilities binds the parameter applications[isNot]
func (o *GetVulnerabilitiesParams) bindParamApplicationsIsNot(formats strfmt.Registry) []string {
	applicationsIsNotIR := o.ApplicationsIsNot

	var applicationsIsNotIC []string
	for _, applicationsIsNotIIR := range applicationsIsNotIR { // explode []int64

		applicationsIsNotIIV := swag.FormatInt64(applicationsIsNotIIR) // int64 as string
		applicationsIsNotIC = append(applicationsIsNotIC, applicationsIsNotIIV)
	}

	// items.CollectionFormat: ""
	applicationsIsNotIS := swag.JoinByFormat(applicationsIsNotIC, "")

	return applicationsIsNotIS
}

// bindParamGetVulnerabilities binds the parameter applications[is]
func (o *GetVulnerabilitiesParams) bindParamApplicationsIs(formats strfmt.Registry) []string {
	applicationsIsIR := o.ApplicationsIs

	var applicationsIsIC []string
	for _, applicationsIsIIR := range applicationsIsIR { // explode []int64

		applicationsIsIIV := swag.FormatInt64(applicationsIsIIR) // int64 as string
		applicationsIsIC = append(applicationsIsIC, applicationsIsIIV)
	}

	// items.CollectionFormat: ""
	applicationsIsIS := swag.JoinByFormat(applicationsIsIC, "")

	return applicationsIsIS
}

// bindParamGetVulnerabilities binds the parameter packageName[contains]
func (o *GetVulnerabilitiesParams) bindParamPackageNameContains(formats strfmt.Registry) []string {
	packageNameContainsIR := o.PackageNameContains

	var packageNameContainsIC []string
	for _, packageNameContainsIIR := range packageNameContainsIR { // explode []string

		packageNameContainsIIV := packageNameContainsIIR // string as string
		packageNameContainsIC = append(packageNameContainsIC, packageNameContainsIIV)
	}

	// items.CollectionFormat: ""
	packageNameContainsIS := swag.JoinByFormat(packageNameContainsIC, "")

	return packageNameContainsIS
}

// bindParamGetVulnerabilities binds the parameter packageName[isNot]
func (o *GetVulnerabilitiesParams) bindParamPackageNameIsNot(formats strfmt.Registry) []string {
	packageNameIsNotIR := o.PackageNameIsNot

	var packageNameIsNotIC []string
	for _, packageNameIsNotIIR := range packageNameIsNotIR { // explode []string

		packageNameIsNotIIV := packageNameIsNotIIR // string as string
		packageNameIsNotIC = append(packageNameIsNotIC, packageNameIsNotIIV)
	}

	// items.CollectionFormat: ""
	packageNameIsNotIS := swag.JoinByFormat(packageNameIsNotIC, "")

	return packageNameIsNotIS
}

// bindParamGetVulnerabilities binds the parameter packageName[is]
func (o *GetVulnerabilitiesParams) bindParamPackageNameIs(formats strfmt.Registry) []string {
	packageNameIsIR := o.PackageNameIs

	var packageNameIsIC []string
	for _, packageNameIsIIR := range packageNameIsIR { // explode []string

		packageNameIsIIV := packageNameIsIIR // string as string
		packageNameIsIC = append(packageNameIsIC, packageNameIsIIV)
	}

	// items.CollectionFormat: ""
	packageNameIsIS := swag.JoinByFormat(packageNameIsIC, "")

	return packageNameIsIS
}

// bindParamGetVulnerabilities binds the parameter packageVersion[contains]
func (o *GetVulnerabilitiesParams) bindParamPackageVersionContains(formats strfmt.Registry) []string {
	packageVersionContainsIR := o.PackageVersionContains

	var packageVersionContainsIC []string
	for _, packageVersionContainsIIR := range packageVersionContainsIR { // explode []string

		packageVersionContainsIIV := packageVersionContainsIIR // string as string
		packageVersionContainsIC = append(packageVersionContainsIC, packageVersionContainsIIV)
	}

	// items.CollectionFormat: ""
	packageVersionContainsIS := swag.JoinByFormat(packageVersionContainsIC, "")

	return packageVersionContainsIS
}

// bindParamGetVulnerabilities binds the parameter packageVersion[isNot]
func (o *GetVulnerabilitiesParams) bindParamPackageVersionIsNot(formats strfmt.Registry) []string {
	packageVersionIsNotIR := o.PackageVersionIsNot

	var packageVersionIsNotIC []string
	for _, packageVersionIsNotIIR := range packageVersionIsNotIR { // explode []string

		packageVersionIsNotIIV := packageVersionIsNotIIR // string as string
		packageVersionIsNotIC = append(packageVersionIsNotIC, packageVersionIsNotIIV)
	}

	// items.CollectionFormat: ""
	packageVersionIsNotIS := swag.JoinByFormat(packageVersionIsNotIC, "")

	return packageVersionIsNotIS
}

// bindParamGetVulnerabilities binds the parameter packageVersion[is]
func (o *GetVulnerabilitiesParams) bindParamPackageVersionIs(formats strfmt.Registry) []string {
	packageVersionIsIR := o.PackageVersionIs

	var packageVersionIsIC []string
	for _, packageVersionIsIIR := range packageVersionIsIR { // explode []string

		packageVersionIsIIV := packageVersionIsIIR // string as string
		packageVersionIsIC = append(packageVersionIsIC, packageVersionIsIIV)
	}

	// items.CollectionFormat: ""
	packageVersionIsIS := swag.JoinByFormat(packageVersionIsIC, "")

	return packageVersionIsIS
}

// bindParamGetVulnerabilities binds the parameter reportingScanners[containElements]
func (o *GetVulnerabilitiesParams) bindParamReportingScannersContainElements(formats strfmt.Registry) []string {
	reportingScannersContainElementsIR := o.ReportingScannersContainElements

	var reportingScannersContainElementsIC []string
	for _, reportingScannersContainElementsIIR := range reportingScannersContainElementsIR { // explode []string

		reportingScannersContainElementsIIV := reportingScannersContainElementsIIR // string as string
		reportingScannersContainElementsIC = append(reportingScannersContainElementsIC, reportingScannersContainElementsIIV)
	}

	// items.CollectionFormat: ""
	reportingScannersContainElementsIS := swag.JoinByFormat(reportingScannersContainElementsIC, "")

	return reportingScannersContainElementsIS
}

// bindParamGetVulnerabilities binds the parameter reportingScanners[doesntContainElements]
func (o *GetVulnerabilitiesParams) bindParamReportingScannersDoesntContainElements(formats strfmt.Registry) []string {
	reportingScannersDoesntContainElementsIR := o.ReportingScannersDoesntContainElements

	var reportingScannersDoesntContainElementsIC []string
	for _, reportingScannersDoesntContainElementsIIR := range reportingScannersDoesntContainElementsIR { // explode []string

		reportingScannersDoesntContainElementsIIV := reportingScannersDoesntContainElementsIIR // string as string
		reportingScannersDoesntContainElementsIC = append(reportingScannersDoesntContainElementsIC, reportingScannersDoesntContainElementsIIV)
	}

	// items.CollectionFormat: ""
	reportingScannersDoesntContainElementsIS := swag.JoinByFormat(reportingScannersDoesntContainElementsIC, "")

	return reportingScannersDoesntContainElementsIS
}

// bindParamGetVulnerabilities binds the parameter vulnerabilityName[contains]
func (o *GetVulnerabilitiesParams) bindParamVulnerabilityNameContains(formats strfmt.Registry) []string {
	vulnerabilityNameContainsIR := o.VulnerabilityNameContains

	var vulnerabilityNameContainsIC []string
	for _, vulnerabilityNameContainsIIR := range vulnerabilityNameContainsIR { // explode []string

		vulnerabilityNameContainsIIV := vulnerabilityNameContainsIIR // string as string
		vulnerabilityNameContainsIC = append(vulnerabilityNameContainsIC, vulnerabilityNameContainsIIV)
	}

	// items.CollectionFormat: ""
	vulnerabilityNameContainsIS := swag.JoinByFormat(vulnerabilityNameContainsIC, "")

	return vulnerabilityNameContainsIS
}

// bindParamGetVulnerabilities binds the parameter vulnerabilityName[isNot]
func (o *GetVulnerabilitiesParams) bindParamVulnerabilityNameIsNot(formats strfmt.Registry) []string {
	vulnerabilityNameIsNotIR := o.VulnerabilityNameIsNot

	var vulnerabilityNameIsNotIC []string
	for _, vulnerabilityNameIsNotIIR := range vulnerabilityNameIsNotIR { // explode []string

		vulnerabilityNameIsNotIIV := vulnerabilityNameIsNotIIR // string as string
		vulnerabilityNameIsNotIC = append(vulnerabilityNameIsNotIC, vulnerabilityNameIsNotIIV)
	}

	// items.CollectionFormat: ""
	vulnerabilityNameIsNotIS := swag.JoinByFormat(vulnerabilityNameIsNotIC, "")

	return vulnerabilityNameIsNotIS
}

// bindParamGetVulnerabilities binds the parameter vulnerabilityName[is]
func (o *GetVulnerabilitiesParams) bindParamVulnerabilityNameIs(formats strfmt.Registry) []string {
	vulnerabilityNameIsIR := o.VulnerabilityNameIs

	var vulnerabilityNameIsIC []string
	for _, vulnerabilityNameIsIIR := range vulnerabilityNameIsIR { // explode []string

		vulnerabilityNameIsIIV := vulnerabilityNameIsIIR // string as string
		vulnerabilityNameIsIC = append(vulnerabilityNameIsIC, vulnerabilityNameIsIIV)
	}

	// items.CollectionFormat: ""
	vulnerabilityNameIsIS := swag.JoinByFormat(vulnerabilityNameIsIC, "")

	return vulnerabilityNameIsIS
}

// bindParamGetVulnerabilities binds the parameter vulnerabilitySeverity[isNot]
func (o *GetVulnerabilitiesParams) bindParamVulnerabilitySeverityIsNot(formats strfmt.Registry) []string {
	vulnerabilitySeverityIsNotIR := o.VulnerabilitySeverityIsNot

	var vulnerabilitySeverityIsNotIC []string
	for _, vulnerabilitySeverityIsNotIIR := range vulnerabilitySeverityIsNotIR { // explode []string

		vulnerabilitySeverityIsNotIIV := vulnerabilitySeverityIsNotIIR // string as string
		vulnerabilitySeverityIsNotIC = append(vulnerabilitySeverityIsNotIC, vulnerabilitySeverityIsNotIIV)
	}

	// items.CollectionFormat: ""
	vulnerabilitySeverityIsNotIS := swag.JoinByFormat(vulnerabilitySeverityIsNotIC, "")

	return vulnerabilitySeverityIsNotIS
}

// bindParamGetVulnerabilities binds the parameter vulnerabilitySeverity[is]
func (o *GetVulnerabilitiesParams) bindParamVulnerabilitySeverityIs(formats strfmt.Registry) []string {
	vulnerabilitySeverityIsIR := o.VulnerabilitySeverityIs

	var vulnerabilitySeverityIsIC []string
	for _, vulnerabilitySeverityIsIIR := range vulnerabilitySeverityIsIR { // explode []string

		vulnerabilitySeverityIsIIV := vulnerabilitySeverityIsIIR // string as string
		vulnerabilitySeverityIsIC = append(vulnerabilitySeverityIsIC, vulnerabilitySeverityIsIIV)
	}

	// items.CollectionFormat: ""
	vulnerabilitySeverityIsIS := swag.JoinByFormat(vulnerabilitySeverityIsIC, "")

	return vulnerabilitySeverityIsIS
}

// bindParamGetVulnerabilities binds the parameter vulnerabilitySource[is]
func (o *GetVulnerabilitiesParams) bindParamVulnerabilitySourceIs(formats strfmt.Registry) []string {
	vulnerabilitySourceIsIR := o.VulnerabilitySourceIs

	var vulnerabilitySourceIsIC []string
	for _, vulnerabilitySourceIsIIR := range vulnerabilitySourceIsIR { // explode []string

		vulnerabilitySourceIsIIV := vulnerabilitySourceIsIIR // string as string
		vulnerabilitySourceIsIC = append(vulnerabilitySourceIsIC, vulnerabilitySourceIsIIV)
	}

	// items.CollectionFormat: ""
	vulnerabilitySourceIsIS := swag.JoinByFormat(vulnerabilitySourceIsIC, "")

	return vulnerabilitySourceIsIS
}
