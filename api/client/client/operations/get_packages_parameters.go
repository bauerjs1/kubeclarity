// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPackagesParams creates a new GetPackagesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPackagesParams() *GetPackagesParams {
	return &GetPackagesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPackagesParamsWithTimeout creates a new GetPackagesParams object
// with the ability to set a timeout on a request.
func NewGetPackagesParamsWithTimeout(timeout time.Duration) *GetPackagesParams {
	return &GetPackagesParams{
		timeout: timeout,
	}
}

// NewGetPackagesParamsWithContext creates a new GetPackagesParams object
// with the ability to set a context for a request.
func NewGetPackagesParamsWithContext(ctx context.Context) *GetPackagesParams {
	return &GetPackagesParams{
		Context: ctx,
	}
}

// NewGetPackagesParamsWithHTTPClient creates a new GetPackagesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPackagesParamsWithHTTPClient(client *http.Client) *GetPackagesParams {
	return &GetPackagesParams{
		HTTPClient: client,
	}
}

/*
GetPackagesParams contains all the parameters to send to the API endpoint

	for the get packages operation.

	Typically these are written to a http.Request.
*/
type GetPackagesParams struct {

	/* ApplicationID.

	   application ID system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	ApplicationID *string

	/* ApplicationResourceID.

	   application resource ID system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	ApplicationResourceID *string

	/* ApplicationResourcesGte.

	   greater than or equal
	*/
	ApplicationResourcesGte *int64

	// ApplicationResourcesIsNot.
	ApplicationResourcesIsNot []int64

	// ApplicationResourcesIs.
	ApplicationResourcesIs []int64

	/* ApplicationResourcesLte.

	   less than or equal
	*/
	ApplicationResourcesLte *int64

	/* ApplicationsGte.

	   greater than or equal
	*/
	ApplicationsGte *int64

	// ApplicationsIsNot.
	ApplicationsIsNot []int64

	// ApplicationsIs.
	ApplicationsIs []int64

	/* ApplicationsLte.

	   less than or equal
	*/
	ApplicationsLte *int64

	/* CurrentRuntimeScan.

	   current runtime scan system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	CurrentRuntimeScan *bool

	// LanguageContains.
	LanguageContains []string

	// LanguageEnd.
	LanguageEnd *string

	// LanguageIsNot.
	LanguageIsNot []string

	// LanguageIs.
	LanguageIs []string

	// LanguageStart.
	LanguageStart *string

	// LicenseContains.
	LicenseContains []string

	// LicenseEnd.
	LicenseEnd *string

	// LicenseIsNot.
	LicenseIsNot []string

	// LicenseIs.
	LicenseIs []string

	// LicenseStart.
	LicenseStart *string

	// PackageNameContains.
	PackageNameContains []string

	// PackageNameEnd.
	PackageNameEnd *string

	// PackageNameIsNot.
	PackageNameIsNot []string

	// PackageNameIs.
	PackageNameIs []string

	// PackageNameStart.
	PackageNameStart *string

	// PackageVersionContains.
	PackageVersionContains []string

	// PackageVersionEnd.
	PackageVersionEnd *string

	// PackageVersionIsNot.
	PackageVersionIsNot []string

	// PackageVersionIs.
	PackageVersionIs []string

	// PackageVersionStart.
	PackageVersionStart *string

	/* Page.

	   Page number of the query
	*/
	Page int64

	/* PageSize.

	   Maximum items to return
	*/
	PageSize int64

	/* SortDir.

	   Sorting direction

	   Default: "ASC"
	*/
	SortDir *string

	/* SortKey.

	   Sort key
	*/
	SortKey string

	// VulnerabilitySeverityGte.
	VulnerabilitySeverityGte *string

	// VulnerabilitySeverityLte.
	VulnerabilitySeverityLte *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get packages params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPackagesParams) WithDefaults() *GetPackagesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get packages params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPackagesParams) SetDefaults() {
	var (
		sortDirDefault = string("ASC")
	)

	val := GetPackagesParams{
		SortDir: &sortDirDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get packages params
func (o *GetPackagesParams) WithTimeout(timeout time.Duration) *GetPackagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get packages params
func (o *GetPackagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get packages params
func (o *GetPackagesParams) WithContext(ctx context.Context) *GetPackagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get packages params
func (o *GetPackagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get packages params
func (o *GetPackagesParams) WithHTTPClient(client *http.Client) *GetPackagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get packages params
func (o *GetPackagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the get packages params
func (o *GetPackagesParams) WithApplicationID(applicationID *string) *GetPackagesParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the get packages params
func (o *GetPackagesParams) SetApplicationID(applicationID *string) {
	o.ApplicationID = applicationID
}

// WithApplicationResourceID adds the applicationResourceID to the get packages params
func (o *GetPackagesParams) WithApplicationResourceID(applicationResourceID *string) *GetPackagesParams {
	o.SetApplicationResourceID(applicationResourceID)
	return o
}

// SetApplicationResourceID adds the applicationResourceId to the get packages params
func (o *GetPackagesParams) SetApplicationResourceID(applicationResourceID *string) {
	o.ApplicationResourceID = applicationResourceID
}

// WithApplicationResourcesGte adds the applicationResourcesGte to the get packages params
func (o *GetPackagesParams) WithApplicationResourcesGte(applicationResourcesGte *int64) *GetPackagesParams {
	o.SetApplicationResourcesGte(applicationResourcesGte)
	return o
}

// SetApplicationResourcesGte adds the applicationResourcesGte to the get packages params
func (o *GetPackagesParams) SetApplicationResourcesGte(applicationResourcesGte *int64) {
	o.ApplicationResourcesGte = applicationResourcesGte
}

// WithApplicationResourcesIsNot adds the applicationResourcesIsNot to the get packages params
func (o *GetPackagesParams) WithApplicationResourcesIsNot(applicationResourcesIsNot []int64) *GetPackagesParams {
	o.SetApplicationResourcesIsNot(applicationResourcesIsNot)
	return o
}

// SetApplicationResourcesIsNot adds the applicationResourcesIsNot to the get packages params
func (o *GetPackagesParams) SetApplicationResourcesIsNot(applicationResourcesIsNot []int64) {
	o.ApplicationResourcesIsNot = applicationResourcesIsNot
}

// WithApplicationResourcesIs adds the applicationResourcesIs to the get packages params
func (o *GetPackagesParams) WithApplicationResourcesIs(applicationResourcesIs []int64) *GetPackagesParams {
	o.SetApplicationResourcesIs(applicationResourcesIs)
	return o
}

// SetApplicationResourcesIs adds the applicationResourcesIs to the get packages params
func (o *GetPackagesParams) SetApplicationResourcesIs(applicationResourcesIs []int64) {
	o.ApplicationResourcesIs = applicationResourcesIs
}

// WithApplicationResourcesLte adds the applicationResourcesLte to the get packages params
func (o *GetPackagesParams) WithApplicationResourcesLte(applicationResourcesLte *int64) *GetPackagesParams {
	o.SetApplicationResourcesLte(applicationResourcesLte)
	return o
}

// SetApplicationResourcesLte adds the applicationResourcesLte to the get packages params
func (o *GetPackagesParams) SetApplicationResourcesLte(applicationResourcesLte *int64) {
	o.ApplicationResourcesLte = applicationResourcesLte
}

// WithApplicationsGte adds the applicationsGte to the get packages params
func (o *GetPackagesParams) WithApplicationsGte(applicationsGte *int64) *GetPackagesParams {
	o.SetApplicationsGte(applicationsGte)
	return o
}

// SetApplicationsGte adds the applicationsGte to the get packages params
func (o *GetPackagesParams) SetApplicationsGte(applicationsGte *int64) {
	o.ApplicationsGte = applicationsGte
}

// WithApplicationsIsNot adds the applicationsIsNot to the get packages params
func (o *GetPackagesParams) WithApplicationsIsNot(applicationsIsNot []int64) *GetPackagesParams {
	o.SetApplicationsIsNot(applicationsIsNot)
	return o
}

// SetApplicationsIsNot adds the applicationsIsNot to the get packages params
func (o *GetPackagesParams) SetApplicationsIsNot(applicationsIsNot []int64) {
	o.ApplicationsIsNot = applicationsIsNot
}

// WithApplicationsIs adds the applicationsIs to the get packages params
func (o *GetPackagesParams) WithApplicationsIs(applicationsIs []int64) *GetPackagesParams {
	o.SetApplicationsIs(applicationsIs)
	return o
}

// SetApplicationsIs adds the applicationsIs to the get packages params
func (o *GetPackagesParams) SetApplicationsIs(applicationsIs []int64) {
	o.ApplicationsIs = applicationsIs
}

// WithApplicationsLte adds the applicationsLte to the get packages params
func (o *GetPackagesParams) WithApplicationsLte(applicationsLte *int64) *GetPackagesParams {
	o.SetApplicationsLte(applicationsLte)
	return o
}

// SetApplicationsLte adds the applicationsLte to the get packages params
func (o *GetPackagesParams) SetApplicationsLte(applicationsLte *int64) {
	o.ApplicationsLte = applicationsLte
}

// WithCurrentRuntimeScan adds the currentRuntimeScan to the get packages params
func (o *GetPackagesParams) WithCurrentRuntimeScan(currentRuntimeScan *bool) *GetPackagesParams {
	o.SetCurrentRuntimeScan(currentRuntimeScan)
	return o
}

// SetCurrentRuntimeScan adds the currentRuntimeScan to the get packages params
func (o *GetPackagesParams) SetCurrentRuntimeScan(currentRuntimeScan *bool) {
	o.CurrentRuntimeScan = currentRuntimeScan
}

// WithLanguageContains adds the languageContains to the get packages params
func (o *GetPackagesParams) WithLanguageContains(languageContains []string) *GetPackagesParams {
	o.SetLanguageContains(languageContains)
	return o
}

// SetLanguageContains adds the languageContains to the get packages params
func (o *GetPackagesParams) SetLanguageContains(languageContains []string) {
	o.LanguageContains = languageContains
}

// WithLanguageEnd adds the languageEnd to the get packages params
func (o *GetPackagesParams) WithLanguageEnd(languageEnd *string) *GetPackagesParams {
	o.SetLanguageEnd(languageEnd)
	return o
}

// SetLanguageEnd adds the languageEnd to the get packages params
func (o *GetPackagesParams) SetLanguageEnd(languageEnd *string) {
	o.LanguageEnd = languageEnd
}

// WithLanguageIsNot adds the languageIsNot to the get packages params
func (o *GetPackagesParams) WithLanguageIsNot(languageIsNot []string) *GetPackagesParams {
	o.SetLanguageIsNot(languageIsNot)
	return o
}

// SetLanguageIsNot adds the languageIsNot to the get packages params
func (o *GetPackagesParams) SetLanguageIsNot(languageIsNot []string) {
	o.LanguageIsNot = languageIsNot
}

// WithLanguageIs adds the languageIs to the get packages params
func (o *GetPackagesParams) WithLanguageIs(languageIs []string) *GetPackagesParams {
	o.SetLanguageIs(languageIs)
	return o
}

// SetLanguageIs adds the languageIs to the get packages params
func (o *GetPackagesParams) SetLanguageIs(languageIs []string) {
	o.LanguageIs = languageIs
}

// WithLanguageStart adds the languageStart to the get packages params
func (o *GetPackagesParams) WithLanguageStart(languageStart *string) *GetPackagesParams {
	o.SetLanguageStart(languageStart)
	return o
}

// SetLanguageStart adds the languageStart to the get packages params
func (o *GetPackagesParams) SetLanguageStart(languageStart *string) {
	o.LanguageStart = languageStart
}

// WithLicenseContains adds the licenseContains to the get packages params
func (o *GetPackagesParams) WithLicenseContains(licenseContains []string) *GetPackagesParams {
	o.SetLicenseContains(licenseContains)
	return o
}

// SetLicenseContains adds the licenseContains to the get packages params
func (o *GetPackagesParams) SetLicenseContains(licenseContains []string) {
	o.LicenseContains = licenseContains
}

// WithLicenseEnd adds the licenseEnd to the get packages params
func (o *GetPackagesParams) WithLicenseEnd(licenseEnd *string) *GetPackagesParams {
	o.SetLicenseEnd(licenseEnd)
	return o
}

// SetLicenseEnd adds the licenseEnd to the get packages params
func (o *GetPackagesParams) SetLicenseEnd(licenseEnd *string) {
	o.LicenseEnd = licenseEnd
}

// WithLicenseIsNot adds the licenseIsNot to the get packages params
func (o *GetPackagesParams) WithLicenseIsNot(licenseIsNot []string) *GetPackagesParams {
	o.SetLicenseIsNot(licenseIsNot)
	return o
}

// SetLicenseIsNot adds the licenseIsNot to the get packages params
func (o *GetPackagesParams) SetLicenseIsNot(licenseIsNot []string) {
	o.LicenseIsNot = licenseIsNot
}

// WithLicenseIs adds the licenseIs to the get packages params
func (o *GetPackagesParams) WithLicenseIs(licenseIs []string) *GetPackagesParams {
	o.SetLicenseIs(licenseIs)
	return o
}

// SetLicenseIs adds the licenseIs to the get packages params
func (o *GetPackagesParams) SetLicenseIs(licenseIs []string) {
	o.LicenseIs = licenseIs
}

// WithLicenseStart adds the licenseStart to the get packages params
func (o *GetPackagesParams) WithLicenseStart(licenseStart *string) *GetPackagesParams {
	o.SetLicenseStart(licenseStart)
	return o
}

// SetLicenseStart adds the licenseStart to the get packages params
func (o *GetPackagesParams) SetLicenseStart(licenseStart *string) {
	o.LicenseStart = licenseStart
}

// WithPackageNameContains adds the packageNameContains to the get packages params
func (o *GetPackagesParams) WithPackageNameContains(packageNameContains []string) *GetPackagesParams {
	o.SetPackageNameContains(packageNameContains)
	return o
}

// SetPackageNameContains adds the packageNameContains to the get packages params
func (o *GetPackagesParams) SetPackageNameContains(packageNameContains []string) {
	o.PackageNameContains = packageNameContains
}

// WithPackageNameEnd adds the packageNameEnd to the get packages params
func (o *GetPackagesParams) WithPackageNameEnd(packageNameEnd *string) *GetPackagesParams {
	o.SetPackageNameEnd(packageNameEnd)
	return o
}

// SetPackageNameEnd adds the packageNameEnd to the get packages params
func (o *GetPackagesParams) SetPackageNameEnd(packageNameEnd *string) {
	o.PackageNameEnd = packageNameEnd
}

// WithPackageNameIsNot adds the packageNameIsNot to the get packages params
func (o *GetPackagesParams) WithPackageNameIsNot(packageNameIsNot []string) *GetPackagesParams {
	o.SetPackageNameIsNot(packageNameIsNot)
	return o
}

// SetPackageNameIsNot adds the packageNameIsNot to the get packages params
func (o *GetPackagesParams) SetPackageNameIsNot(packageNameIsNot []string) {
	o.PackageNameIsNot = packageNameIsNot
}

// WithPackageNameIs adds the packageNameIs to the get packages params
func (o *GetPackagesParams) WithPackageNameIs(packageNameIs []string) *GetPackagesParams {
	o.SetPackageNameIs(packageNameIs)
	return o
}

// SetPackageNameIs adds the packageNameIs to the get packages params
func (o *GetPackagesParams) SetPackageNameIs(packageNameIs []string) {
	o.PackageNameIs = packageNameIs
}

// WithPackageNameStart adds the packageNameStart to the get packages params
func (o *GetPackagesParams) WithPackageNameStart(packageNameStart *string) *GetPackagesParams {
	o.SetPackageNameStart(packageNameStart)
	return o
}

// SetPackageNameStart adds the packageNameStart to the get packages params
func (o *GetPackagesParams) SetPackageNameStart(packageNameStart *string) {
	o.PackageNameStart = packageNameStart
}

// WithPackageVersionContains adds the packageVersionContains to the get packages params
func (o *GetPackagesParams) WithPackageVersionContains(packageVersionContains []string) *GetPackagesParams {
	o.SetPackageVersionContains(packageVersionContains)
	return o
}

// SetPackageVersionContains adds the packageVersionContains to the get packages params
func (o *GetPackagesParams) SetPackageVersionContains(packageVersionContains []string) {
	o.PackageVersionContains = packageVersionContains
}

// WithPackageVersionEnd adds the packageVersionEnd to the get packages params
func (o *GetPackagesParams) WithPackageVersionEnd(packageVersionEnd *string) *GetPackagesParams {
	o.SetPackageVersionEnd(packageVersionEnd)
	return o
}

// SetPackageVersionEnd adds the packageVersionEnd to the get packages params
func (o *GetPackagesParams) SetPackageVersionEnd(packageVersionEnd *string) {
	o.PackageVersionEnd = packageVersionEnd
}

// WithPackageVersionIsNot adds the packageVersionIsNot to the get packages params
func (o *GetPackagesParams) WithPackageVersionIsNot(packageVersionIsNot []string) *GetPackagesParams {
	o.SetPackageVersionIsNot(packageVersionIsNot)
	return o
}

// SetPackageVersionIsNot adds the packageVersionIsNot to the get packages params
func (o *GetPackagesParams) SetPackageVersionIsNot(packageVersionIsNot []string) {
	o.PackageVersionIsNot = packageVersionIsNot
}

// WithPackageVersionIs adds the packageVersionIs to the get packages params
func (o *GetPackagesParams) WithPackageVersionIs(packageVersionIs []string) *GetPackagesParams {
	o.SetPackageVersionIs(packageVersionIs)
	return o
}

// SetPackageVersionIs adds the packageVersionIs to the get packages params
func (o *GetPackagesParams) SetPackageVersionIs(packageVersionIs []string) {
	o.PackageVersionIs = packageVersionIs
}

// WithPackageVersionStart adds the packageVersionStart to the get packages params
func (o *GetPackagesParams) WithPackageVersionStart(packageVersionStart *string) *GetPackagesParams {
	o.SetPackageVersionStart(packageVersionStart)
	return o
}

// SetPackageVersionStart adds the packageVersionStart to the get packages params
func (o *GetPackagesParams) SetPackageVersionStart(packageVersionStart *string) {
	o.PackageVersionStart = packageVersionStart
}

// WithPage adds the page to the get packages params
func (o *GetPackagesParams) WithPage(page int64) *GetPackagesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get packages params
func (o *GetPackagesParams) SetPage(page int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get packages params
func (o *GetPackagesParams) WithPageSize(pageSize int64) *GetPackagesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get packages params
func (o *GetPackagesParams) SetPageSize(pageSize int64) {
	o.PageSize = pageSize
}

// WithSortDir adds the sortDir to the get packages params
func (o *GetPackagesParams) WithSortDir(sortDir *string) *GetPackagesParams {
	o.SetSortDir(sortDir)
	return o
}

// SetSortDir adds the sortDir to the get packages params
func (o *GetPackagesParams) SetSortDir(sortDir *string) {
	o.SortDir = sortDir
}

// WithSortKey adds the sortKey to the get packages params
func (o *GetPackagesParams) WithSortKey(sortKey string) *GetPackagesParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the get packages params
func (o *GetPackagesParams) SetSortKey(sortKey string) {
	o.SortKey = sortKey
}

// WithVulnerabilitySeverityGte adds the vulnerabilitySeverityGte to the get packages params
func (o *GetPackagesParams) WithVulnerabilitySeverityGte(vulnerabilitySeverityGte *string) *GetPackagesParams {
	o.SetVulnerabilitySeverityGte(vulnerabilitySeverityGte)
	return o
}

// SetVulnerabilitySeverityGte adds the vulnerabilitySeverityGte to the get packages params
func (o *GetPackagesParams) SetVulnerabilitySeverityGte(vulnerabilitySeverityGte *string) {
	o.VulnerabilitySeverityGte = vulnerabilitySeverityGte
}

// WithVulnerabilitySeverityLte adds the vulnerabilitySeverityLte to the get packages params
func (o *GetPackagesParams) WithVulnerabilitySeverityLte(vulnerabilitySeverityLte *string) *GetPackagesParams {
	o.SetVulnerabilitySeverityLte(vulnerabilitySeverityLte)
	return o
}

// SetVulnerabilitySeverityLte adds the vulnerabilitySeverityLte to the get packages params
func (o *GetPackagesParams) SetVulnerabilitySeverityLte(vulnerabilitySeverityLte *string) {
	o.VulnerabilitySeverityLte = vulnerabilitySeverityLte
}

// WriteToRequest writes these params to a swagger request
func (o *GetPackagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApplicationID != nil {

		// query param applicationID
		var qrApplicationID string

		if o.ApplicationID != nil {
			qrApplicationID = *o.ApplicationID
		}
		qApplicationID := qrApplicationID
		if qApplicationID != "" {

			if err := r.SetQueryParam("applicationID", qApplicationID); err != nil {
				return err
			}
		}
	}

	if o.ApplicationResourceID != nil {

		// query param applicationResourceID
		var qrApplicationResourceID string

		if o.ApplicationResourceID != nil {
			qrApplicationResourceID = *o.ApplicationResourceID
		}
		qApplicationResourceID := qrApplicationResourceID
		if qApplicationResourceID != "" {

			if err := r.SetQueryParam("applicationResourceID", qApplicationResourceID); err != nil {
				return err
			}
		}
	}

	if o.ApplicationResourcesGte != nil {

		// query param applicationResources[gte]
		var qrApplicationResourcesGte int64

		if o.ApplicationResourcesGte != nil {
			qrApplicationResourcesGte = *o.ApplicationResourcesGte
		}
		qApplicationResourcesGte := swag.FormatInt64(qrApplicationResourcesGte)
		if qApplicationResourcesGte != "" {

			if err := r.SetQueryParam("applicationResources[gte]", qApplicationResourcesGte); err != nil {
				return err
			}
		}
	}

	if o.ApplicationResourcesIsNot != nil {

		// binding items for applicationResources[isNot]
		joinedApplicationResourcesIsNot := o.bindParamApplicationResourcesIsNot(reg)

		// query array param applicationResources[isNot]
		if err := r.SetQueryParam("applicationResources[isNot]", joinedApplicationResourcesIsNot...); err != nil {
			return err
		}
	}

	if o.ApplicationResourcesIs != nil {

		// binding items for applicationResources[is]
		joinedApplicationResourcesIs := o.bindParamApplicationResourcesIs(reg)

		// query array param applicationResources[is]
		if err := r.SetQueryParam("applicationResources[is]", joinedApplicationResourcesIs...); err != nil {
			return err
		}
	}

	if o.ApplicationResourcesLte != nil {

		// query param applicationResources[lte]
		var qrApplicationResourcesLte int64

		if o.ApplicationResourcesLte != nil {
			qrApplicationResourcesLte = *o.ApplicationResourcesLte
		}
		qApplicationResourcesLte := swag.FormatInt64(qrApplicationResourcesLte)
		if qApplicationResourcesLte != "" {

			if err := r.SetQueryParam("applicationResources[lte]", qApplicationResourcesLte); err != nil {
				return err
			}
		}
	}

	if o.ApplicationsGte != nil {

		// query param applications[gte]
		var qrApplicationsGte int64

		if o.ApplicationsGte != nil {
			qrApplicationsGte = *o.ApplicationsGte
		}
		qApplicationsGte := swag.FormatInt64(qrApplicationsGte)
		if qApplicationsGte != "" {

			if err := r.SetQueryParam("applications[gte]", qApplicationsGte); err != nil {
				return err
			}
		}
	}

	if o.ApplicationsIsNot != nil {

		// binding items for applications[isNot]
		joinedApplicationsIsNot := o.bindParamApplicationsIsNot(reg)

		// query array param applications[isNot]
		if err := r.SetQueryParam("applications[isNot]", joinedApplicationsIsNot...); err != nil {
			return err
		}
	}

	if o.ApplicationsIs != nil {

		// binding items for applications[is]
		joinedApplicationsIs := o.bindParamApplicationsIs(reg)

		// query array param applications[is]
		if err := r.SetQueryParam("applications[is]", joinedApplicationsIs...); err != nil {
			return err
		}
	}

	if o.ApplicationsLte != nil {

		// query param applications[lte]
		var qrApplicationsLte int64

		if o.ApplicationsLte != nil {
			qrApplicationsLte = *o.ApplicationsLte
		}
		qApplicationsLte := swag.FormatInt64(qrApplicationsLte)
		if qApplicationsLte != "" {

			if err := r.SetQueryParam("applications[lte]", qApplicationsLte); err != nil {
				return err
			}
		}
	}

	if o.CurrentRuntimeScan != nil {

		// query param currentRuntimeScan
		var qrCurrentRuntimeScan bool

		if o.CurrentRuntimeScan != nil {
			qrCurrentRuntimeScan = *o.CurrentRuntimeScan
		}
		qCurrentRuntimeScan := swag.FormatBool(qrCurrentRuntimeScan)
		if qCurrentRuntimeScan != "" {

			if err := r.SetQueryParam("currentRuntimeScan", qCurrentRuntimeScan); err != nil {
				return err
			}
		}
	}

	if o.LanguageContains != nil {

		// binding items for language[contains]
		joinedLanguageContains := o.bindParamLanguageContains(reg)

		// query array param language[contains]
		if err := r.SetQueryParam("language[contains]", joinedLanguageContains...); err != nil {
			return err
		}
	}

	if o.LanguageEnd != nil {

		// query param language[end]
		var qrLanguageEnd string

		if o.LanguageEnd != nil {
			qrLanguageEnd = *o.LanguageEnd
		}
		qLanguageEnd := qrLanguageEnd
		if qLanguageEnd != "" {

			if err := r.SetQueryParam("language[end]", qLanguageEnd); err != nil {
				return err
			}
		}
	}

	if o.LanguageIsNot != nil {

		// binding items for language[isNot]
		joinedLanguageIsNot := o.bindParamLanguageIsNot(reg)

		// query array param language[isNot]
		if err := r.SetQueryParam("language[isNot]", joinedLanguageIsNot...); err != nil {
			return err
		}
	}

	if o.LanguageIs != nil {

		// binding items for language[is]
		joinedLanguageIs := o.bindParamLanguageIs(reg)

		// query array param language[is]
		if err := r.SetQueryParam("language[is]", joinedLanguageIs...); err != nil {
			return err
		}
	}

	if o.LanguageStart != nil {

		// query param language[start]
		var qrLanguageStart string

		if o.LanguageStart != nil {
			qrLanguageStart = *o.LanguageStart
		}
		qLanguageStart := qrLanguageStart
		if qLanguageStart != "" {

			if err := r.SetQueryParam("language[start]", qLanguageStart); err != nil {
				return err
			}
		}
	}

	if o.LicenseContains != nil {

		// binding items for license[contains]
		joinedLicenseContains := o.bindParamLicenseContains(reg)

		// query array param license[contains]
		if err := r.SetQueryParam("license[contains]", joinedLicenseContains...); err != nil {
			return err
		}
	}

	if o.LicenseEnd != nil {

		// query param license[end]
		var qrLicenseEnd string

		if o.LicenseEnd != nil {
			qrLicenseEnd = *o.LicenseEnd
		}
		qLicenseEnd := qrLicenseEnd
		if qLicenseEnd != "" {

			if err := r.SetQueryParam("license[end]", qLicenseEnd); err != nil {
				return err
			}
		}
	}

	if o.LicenseIsNot != nil {

		// binding items for license[isNot]
		joinedLicenseIsNot := o.bindParamLicenseIsNot(reg)

		// query array param license[isNot]
		if err := r.SetQueryParam("license[isNot]", joinedLicenseIsNot...); err != nil {
			return err
		}
	}

	if o.LicenseIs != nil {

		// binding items for license[is]
		joinedLicenseIs := o.bindParamLicenseIs(reg)

		// query array param license[is]
		if err := r.SetQueryParam("license[is]", joinedLicenseIs...); err != nil {
			return err
		}
	}

	if o.LicenseStart != nil {

		// query param license[start]
		var qrLicenseStart string

		if o.LicenseStart != nil {
			qrLicenseStart = *o.LicenseStart
		}
		qLicenseStart := qrLicenseStart
		if qLicenseStart != "" {

			if err := r.SetQueryParam("license[start]", qLicenseStart); err != nil {
				return err
			}
		}
	}

	if o.PackageNameContains != nil {

		// binding items for packageName[contains]
		joinedPackageNameContains := o.bindParamPackageNameContains(reg)

		// query array param packageName[contains]
		if err := r.SetQueryParam("packageName[contains]", joinedPackageNameContains...); err != nil {
			return err
		}
	}

	if o.PackageNameEnd != nil {

		// query param packageName[end]
		var qrPackageNameEnd string

		if o.PackageNameEnd != nil {
			qrPackageNameEnd = *o.PackageNameEnd
		}
		qPackageNameEnd := qrPackageNameEnd
		if qPackageNameEnd != "" {

			if err := r.SetQueryParam("packageName[end]", qPackageNameEnd); err != nil {
				return err
			}
		}
	}

	if o.PackageNameIsNot != nil {

		// binding items for packageName[isNot]
		joinedPackageNameIsNot := o.bindParamPackageNameIsNot(reg)

		// query array param packageName[isNot]
		if err := r.SetQueryParam("packageName[isNot]", joinedPackageNameIsNot...); err != nil {
			return err
		}
	}

	if o.PackageNameIs != nil {

		// binding items for packageName[is]
		joinedPackageNameIs := o.bindParamPackageNameIs(reg)

		// query array param packageName[is]
		if err := r.SetQueryParam("packageName[is]", joinedPackageNameIs...); err != nil {
			return err
		}
	}

	if o.PackageNameStart != nil {

		// query param packageName[start]
		var qrPackageNameStart string

		if o.PackageNameStart != nil {
			qrPackageNameStart = *o.PackageNameStart
		}
		qPackageNameStart := qrPackageNameStart
		if qPackageNameStart != "" {

			if err := r.SetQueryParam("packageName[start]", qPackageNameStart); err != nil {
				return err
			}
		}
	}

	if o.PackageVersionContains != nil {

		// binding items for packageVersion[contains]
		joinedPackageVersionContains := o.bindParamPackageVersionContains(reg)

		// query array param packageVersion[contains]
		if err := r.SetQueryParam("packageVersion[contains]", joinedPackageVersionContains...); err != nil {
			return err
		}
	}

	if o.PackageVersionEnd != nil {

		// query param packageVersion[end]
		var qrPackageVersionEnd string

		if o.PackageVersionEnd != nil {
			qrPackageVersionEnd = *o.PackageVersionEnd
		}
		qPackageVersionEnd := qrPackageVersionEnd
		if qPackageVersionEnd != "" {

			if err := r.SetQueryParam("packageVersion[end]", qPackageVersionEnd); err != nil {
				return err
			}
		}
	}

	if o.PackageVersionIsNot != nil {

		// binding items for packageVersion[isNot]
		joinedPackageVersionIsNot := o.bindParamPackageVersionIsNot(reg)

		// query array param packageVersion[isNot]
		if err := r.SetQueryParam("packageVersion[isNot]", joinedPackageVersionIsNot...); err != nil {
			return err
		}
	}

	if o.PackageVersionIs != nil {

		// binding items for packageVersion[is]
		joinedPackageVersionIs := o.bindParamPackageVersionIs(reg)

		// query array param packageVersion[is]
		if err := r.SetQueryParam("packageVersion[is]", joinedPackageVersionIs...); err != nil {
			return err
		}
	}

	if o.PackageVersionStart != nil {

		// query param packageVersion[start]
		var qrPackageVersionStart string

		if o.PackageVersionStart != nil {
			qrPackageVersionStart = *o.PackageVersionStart
		}
		qPackageVersionStart := qrPackageVersionStart
		if qPackageVersionStart != "" {

			if err := r.SetQueryParam("packageVersion[start]", qPackageVersionStart); err != nil {
				return err
			}
		}
	}

	// query param page
	qrPage := o.Page
	qPage := swag.FormatInt64(qrPage)
	if qPage != "" {

		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param pageSize
	qrPageSize := o.PageSize
	qPageSize := swag.FormatInt64(qrPageSize)
	if qPageSize != "" {

		if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
			return err
		}
	}

	if o.SortDir != nil {

		// query param sortDir
		var qrSortDir string

		if o.SortDir != nil {
			qrSortDir = *o.SortDir
		}
		qSortDir := qrSortDir
		if qSortDir != "" {

			if err := r.SetQueryParam("sortDir", qSortDir); err != nil {
				return err
			}
		}
	}

	// query param sortKey
	qrSortKey := o.SortKey
	qSortKey := qrSortKey
	if qSortKey != "" {

		if err := r.SetQueryParam("sortKey", qSortKey); err != nil {
			return err
		}
	}

	if o.VulnerabilitySeverityGte != nil {

		// query param vulnerabilitySeverity[gte]
		var qrVulnerabilitySeverityGte string

		if o.VulnerabilitySeverityGte != nil {
			qrVulnerabilitySeverityGte = *o.VulnerabilitySeverityGte
		}
		qVulnerabilitySeverityGte := qrVulnerabilitySeverityGte
		if qVulnerabilitySeverityGte != "" {

			if err := r.SetQueryParam("vulnerabilitySeverity[gte]", qVulnerabilitySeverityGte); err != nil {
				return err
			}
		}
	}

	if o.VulnerabilitySeverityLte != nil {

		// query param vulnerabilitySeverity[lte]
		var qrVulnerabilitySeverityLte string

		if o.VulnerabilitySeverityLte != nil {
			qrVulnerabilitySeverityLte = *o.VulnerabilitySeverityLte
		}
		qVulnerabilitySeverityLte := qrVulnerabilitySeverityLte
		if qVulnerabilitySeverityLte != "" {

			if err := r.SetQueryParam("vulnerabilitySeverity[lte]", qVulnerabilitySeverityLte); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetPackages binds the parameter applicationResources[isNot]
func (o *GetPackagesParams) bindParamApplicationResourcesIsNot(formats strfmt.Registry) []string {
	applicationResourcesIsNotIR := o.ApplicationResourcesIsNot

	var applicationResourcesIsNotIC []string
	for _, applicationResourcesIsNotIIR := range applicationResourcesIsNotIR { // explode []int64

		applicationResourcesIsNotIIV := swag.FormatInt64(applicationResourcesIsNotIIR) // int64 as string
		applicationResourcesIsNotIC = append(applicationResourcesIsNotIC, applicationResourcesIsNotIIV)
	}

	// items.CollectionFormat: ""
	applicationResourcesIsNotIS := swag.JoinByFormat(applicationResourcesIsNotIC, "")

	return applicationResourcesIsNotIS
}

// bindParamGetPackages binds the parameter applicationResources[is]
func (o *GetPackagesParams) bindParamApplicationResourcesIs(formats strfmt.Registry) []string {
	applicationResourcesIsIR := o.ApplicationResourcesIs

	var applicationResourcesIsIC []string
	for _, applicationResourcesIsIIR := range applicationResourcesIsIR { // explode []int64

		applicationResourcesIsIIV := swag.FormatInt64(applicationResourcesIsIIR) // int64 as string
		applicationResourcesIsIC = append(applicationResourcesIsIC, applicationResourcesIsIIV)
	}

	// items.CollectionFormat: ""
	applicationResourcesIsIS := swag.JoinByFormat(applicationResourcesIsIC, "")

	return applicationResourcesIsIS
}

// bindParamGetPackages binds the parameter applications[isNot]
func (o *GetPackagesParams) bindParamApplicationsIsNot(formats strfmt.Registry) []string {
	applicationsIsNotIR := o.ApplicationsIsNot

	var applicationsIsNotIC []string
	for _, applicationsIsNotIIR := range applicationsIsNotIR { // explode []int64

		applicationsIsNotIIV := swag.FormatInt64(applicationsIsNotIIR) // int64 as string
		applicationsIsNotIC = append(applicationsIsNotIC, applicationsIsNotIIV)
	}

	// items.CollectionFormat: ""
	applicationsIsNotIS := swag.JoinByFormat(applicationsIsNotIC, "")

	return applicationsIsNotIS
}

// bindParamGetPackages binds the parameter applications[is]
func (o *GetPackagesParams) bindParamApplicationsIs(formats strfmt.Registry) []string {
	applicationsIsIR := o.ApplicationsIs

	var applicationsIsIC []string
	for _, applicationsIsIIR := range applicationsIsIR { // explode []int64

		applicationsIsIIV := swag.FormatInt64(applicationsIsIIR) // int64 as string
		applicationsIsIC = append(applicationsIsIC, applicationsIsIIV)
	}

	// items.CollectionFormat: ""
	applicationsIsIS := swag.JoinByFormat(applicationsIsIC, "")

	return applicationsIsIS
}

// bindParamGetPackages binds the parameter language[contains]
func (o *GetPackagesParams) bindParamLanguageContains(formats strfmt.Registry) []string {
	languageContainsIR := o.LanguageContains

	var languageContainsIC []string
	for _, languageContainsIIR := range languageContainsIR { // explode []string

		languageContainsIIV := languageContainsIIR // string as string
		languageContainsIC = append(languageContainsIC, languageContainsIIV)
	}

	// items.CollectionFormat: ""
	languageContainsIS := swag.JoinByFormat(languageContainsIC, "")

	return languageContainsIS
}

// bindParamGetPackages binds the parameter language[isNot]
func (o *GetPackagesParams) bindParamLanguageIsNot(formats strfmt.Registry) []string {
	languageIsNotIR := o.LanguageIsNot

	var languageIsNotIC []string
	for _, languageIsNotIIR := range languageIsNotIR { // explode []string

		languageIsNotIIV := languageIsNotIIR // string as string
		languageIsNotIC = append(languageIsNotIC, languageIsNotIIV)
	}

	// items.CollectionFormat: ""
	languageIsNotIS := swag.JoinByFormat(languageIsNotIC, "")

	return languageIsNotIS
}

// bindParamGetPackages binds the parameter language[is]
func (o *GetPackagesParams) bindParamLanguageIs(formats strfmt.Registry) []string {
	languageIsIR := o.LanguageIs

	var languageIsIC []string
	for _, languageIsIIR := range languageIsIR { // explode []string

		languageIsIIV := languageIsIIR // string as string
		languageIsIC = append(languageIsIC, languageIsIIV)
	}

	// items.CollectionFormat: ""
	languageIsIS := swag.JoinByFormat(languageIsIC, "")

	return languageIsIS
}

// bindParamGetPackages binds the parameter license[contains]
func (o *GetPackagesParams) bindParamLicenseContains(formats strfmt.Registry) []string {
	licenseContainsIR := o.LicenseContains

	var licenseContainsIC []string
	for _, licenseContainsIIR := range licenseContainsIR { // explode []string

		licenseContainsIIV := licenseContainsIIR // string as string
		licenseContainsIC = append(licenseContainsIC, licenseContainsIIV)
	}

	// items.CollectionFormat: ""
	licenseContainsIS := swag.JoinByFormat(licenseContainsIC, "")

	return licenseContainsIS
}

// bindParamGetPackages binds the parameter license[isNot]
func (o *GetPackagesParams) bindParamLicenseIsNot(formats strfmt.Registry) []string {
	licenseIsNotIR := o.LicenseIsNot

	var licenseIsNotIC []string
	for _, licenseIsNotIIR := range licenseIsNotIR { // explode []string

		licenseIsNotIIV := licenseIsNotIIR // string as string
		licenseIsNotIC = append(licenseIsNotIC, licenseIsNotIIV)
	}

	// items.CollectionFormat: ""
	licenseIsNotIS := swag.JoinByFormat(licenseIsNotIC, "")

	return licenseIsNotIS
}

// bindParamGetPackages binds the parameter license[is]
func (o *GetPackagesParams) bindParamLicenseIs(formats strfmt.Registry) []string {
	licenseIsIR := o.LicenseIs

	var licenseIsIC []string
	for _, licenseIsIIR := range licenseIsIR { // explode []string

		licenseIsIIV := licenseIsIIR // string as string
		licenseIsIC = append(licenseIsIC, licenseIsIIV)
	}

	// items.CollectionFormat: ""
	licenseIsIS := swag.JoinByFormat(licenseIsIC, "")

	return licenseIsIS
}

// bindParamGetPackages binds the parameter packageName[contains]
func (o *GetPackagesParams) bindParamPackageNameContains(formats strfmt.Registry) []string {
	packageNameContainsIR := o.PackageNameContains

	var packageNameContainsIC []string
	for _, packageNameContainsIIR := range packageNameContainsIR { // explode []string

		packageNameContainsIIV := packageNameContainsIIR // string as string
		packageNameContainsIC = append(packageNameContainsIC, packageNameContainsIIV)
	}

	// items.CollectionFormat: ""
	packageNameContainsIS := swag.JoinByFormat(packageNameContainsIC, "")

	return packageNameContainsIS
}

// bindParamGetPackages binds the parameter packageName[isNot]
func (o *GetPackagesParams) bindParamPackageNameIsNot(formats strfmt.Registry) []string {
	packageNameIsNotIR := o.PackageNameIsNot

	var packageNameIsNotIC []string
	for _, packageNameIsNotIIR := range packageNameIsNotIR { // explode []string

		packageNameIsNotIIV := packageNameIsNotIIR // string as string
		packageNameIsNotIC = append(packageNameIsNotIC, packageNameIsNotIIV)
	}

	// items.CollectionFormat: ""
	packageNameIsNotIS := swag.JoinByFormat(packageNameIsNotIC, "")

	return packageNameIsNotIS
}

// bindParamGetPackages binds the parameter packageName[is]
func (o *GetPackagesParams) bindParamPackageNameIs(formats strfmt.Registry) []string {
	packageNameIsIR := o.PackageNameIs

	var packageNameIsIC []string
	for _, packageNameIsIIR := range packageNameIsIR { // explode []string

		packageNameIsIIV := packageNameIsIIR // string as string
		packageNameIsIC = append(packageNameIsIC, packageNameIsIIV)
	}

	// items.CollectionFormat: ""
	packageNameIsIS := swag.JoinByFormat(packageNameIsIC, "")

	return packageNameIsIS
}

// bindParamGetPackages binds the parameter packageVersion[contains]
func (o *GetPackagesParams) bindParamPackageVersionContains(formats strfmt.Registry) []string {
	packageVersionContainsIR := o.PackageVersionContains

	var packageVersionContainsIC []string
	for _, packageVersionContainsIIR := range packageVersionContainsIR { // explode []string

		packageVersionContainsIIV := packageVersionContainsIIR // string as string
		packageVersionContainsIC = append(packageVersionContainsIC, packageVersionContainsIIV)
	}

	// items.CollectionFormat: ""
	packageVersionContainsIS := swag.JoinByFormat(packageVersionContainsIC, "")

	return packageVersionContainsIS
}

// bindParamGetPackages binds the parameter packageVersion[isNot]
func (o *GetPackagesParams) bindParamPackageVersionIsNot(formats strfmt.Registry) []string {
	packageVersionIsNotIR := o.PackageVersionIsNot

	var packageVersionIsNotIC []string
	for _, packageVersionIsNotIIR := range packageVersionIsNotIR { // explode []string

		packageVersionIsNotIIV := packageVersionIsNotIIR // string as string
		packageVersionIsNotIC = append(packageVersionIsNotIC, packageVersionIsNotIIV)
	}

	// items.CollectionFormat: ""
	packageVersionIsNotIS := swag.JoinByFormat(packageVersionIsNotIC, "")

	return packageVersionIsNotIS
}

// bindParamGetPackages binds the parameter packageVersion[is]
func (o *GetPackagesParams) bindParamPackageVersionIs(formats strfmt.Registry) []string {
	packageVersionIsIR := o.PackageVersionIs

	var packageVersionIsIC []string
	for _, packageVersionIsIIR := range packageVersionIsIR { // explode []string

		packageVersionIsIIV := packageVersionIsIIR // string as string
		packageVersionIsIC = append(packageVersionIsIC, packageVersionIsIIV)
	}

	// items.CollectionFormat: ""
	packageVersionIsIS := swag.JoinByFormat(packageVersionIsIC, "")

	return packageVersionIsIS
}
