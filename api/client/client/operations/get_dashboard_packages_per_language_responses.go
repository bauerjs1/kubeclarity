// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openclarity/kubeclarity/api/client/models"
)

// GetDashboardPackagesPerLanguageReader is a Reader for the GetDashboardPackagesPerLanguage structure.
type GetDashboardPackagesPerLanguageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDashboardPackagesPerLanguageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDashboardPackagesPerLanguageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetDashboardPackagesPerLanguageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDashboardPackagesPerLanguageOK creates a GetDashboardPackagesPerLanguageOK with default headers values
func NewGetDashboardPackagesPerLanguageOK() *GetDashboardPackagesPerLanguageOK {
	return &GetDashboardPackagesPerLanguageOK{}
}

/*
GetDashboardPackagesPerLanguageOK describes a response with status code 200, with default header values.

Success
*/
type GetDashboardPackagesPerLanguageOK struct {
	Payload []*models.PackagesCountPerLanguage
}

// IsSuccess returns true when this get dashboard packages per language o k response has a 2xx status code
func (o *GetDashboardPackagesPerLanguageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get dashboard packages per language o k response has a 3xx status code
func (o *GetDashboardPackagesPerLanguageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dashboard packages per language o k response has a 4xx status code
func (o *GetDashboardPackagesPerLanguageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get dashboard packages per language o k response has a 5xx status code
func (o *GetDashboardPackagesPerLanguageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get dashboard packages per language o k response a status code equal to that given
func (o *GetDashboardPackagesPerLanguageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get dashboard packages per language o k response
func (o *GetDashboardPackagesPerLanguageOK) Code() int {
	return 200
}

func (o *GetDashboardPackagesPerLanguageOK) Error() string {
	return fmt.Sprintf("[GET /dashboard/packagesPerLanguage][%d] getDashboardPackagesPerLanguageOK  %+v", 200, o.Payload)
}

func (o *GetDashboardPackagesPerLanguageOK) String() string {
	return fmt.Sprintf("[GET /dashboard/packagesPerLanguage][%d] getDashboardPackagesPerLanguageOK  %+v", 200, o.Payload)
}

func (o *GetDashboardPackagesPerLanguageOK) GetPayload() []*models.PackagesCountPerLanguage {
	return o.Payload
}

func (o *GetDashboardPackagesPerLanguageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDashboardPackagesPerLanguageDefault creates a GetDashboardPackagesPerLanguageDefault with default headers values
func NewGetDashboardPackagesPerLanguageDefault(code int) *GetDashboardPackagesPerLanguageDefault {
	return &GetDashboardPackagesPerLanguageDefault{
		_statusCode: code,
	}
}

/*
GetDashboardPackagesPerLanguageDefault describes a response with status code -1, with default header values.

unknown error
*/
type GetDashboardPackagesPerLanguageDefault struct {
	_statusCode int

	Payload *models.APIResponse
}

// IsSuccess returns true when this get dashboard packages per language default response has a 2xx status code
func (o *GetDashboardPackagesPerLanguageDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get dashboard packages per language default response has a 3xx status code
func (o *GetDashboardPackagesPerLanguageDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get dashboard packages per language default response has a 4xx status code
func (o *GetDashboardPackagesPerLanguageDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get dashboard packages per language default response has a 5xx status code
func (o *GetDashboardPackagesPerLanguageDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get dashboard packages per language default response a status code equal to that given
func (o *GetDashboardPackagesPerLanguageDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get dashboard packages per language default response
func (o *GetDashboardPackagesPerLanguageDefault) Code() int {
	return o._statusCode
}

func (o *GetDashboardPackagesPerLanguageDefault) Error() string {
	return fmt.Sprintf("[GET /dashboard/packagesPerLanguage][%d] GetDashboardPackagesPerLanguage default  %+v", o._statusCode, o.Payload)
}

func (o *GetDashboardPackagesPerLanguageDefault) String() string {
	return fmt.Sprintf("[GET /dashboard/packagesPerLanguage][%d] GetDashboardPackagesPerLanguage default  %+v", o._statusCode, o.Payload)
}

func (o *GetDashboardPackagesPerLanguageDefault) GetPayload() *models.APIResponse {
	return o.Payload
}

func (o *GetDashboardPackagesPerLanguageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
