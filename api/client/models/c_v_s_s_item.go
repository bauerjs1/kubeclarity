// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CVSSItem c v s s item
//
// swagger:model CVSSItem
type CVSSItem struct {

	// metrics
	Metrics *CVSSMetrics `json:"metrics,omitempty"`

	// vector
	Vector string `json:"vector,omitempty"`

	// vector breakdown
	VectorBreakdown *CVSSVectorBreakdown `json:"vectorBreakdown,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this c v s s item
func (m *CVSSItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVectorBreakdown(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CVSSItem) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	if m.Metrics != nil {
		if err := m.Metrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics")
			}
			return err
		}
	}

	return nil
}

func (m *CVSSItem) validateVectorBreakdown(formats strfmt.Registry) error {
	if swag.IsZero(m.VectorBreakdown) { // not required
		return nil
	}

	if m.VectorBreakdown != nil {
		if err := m.VectorBreakdown.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vectorBreakdown")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this c v s s item based on the context it is used
func (m *CVSSItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVectorBreakdown(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CVSSItem) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.Metrics != nil {
		if err := m.Metrics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics")
			}
			return err
		}
	}

	return nil
}

func (m *CVSSItem) contextValidateVectorBreakdown(ctx context.Context, formats strfmt.Registry) error {

	if m.VectorBreakdown != nil {
		if err := m.VectorBreakdown.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vectorBreakdown")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CVSSItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CVSSItem) UnmarshalBinary(b []byte) error {
	var res CVSSItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
