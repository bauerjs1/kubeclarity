// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Vulnerability vulnerability
//
// swagger:model Vulnerability
type Vulnerability struct {

	// application resources
	ApplicationResources uint32 `json:"applicationResources,omitempty"`

	// applications
	Applications uint32 `json:"applications,omitempty"`

	// cvss base score
	CvssBaseScore float64 `json:"cvssBaseScore,omitempty"`

	// cvss severity
	CvssSeverity VulnerabilitySeverity `json:"cvssSeverity,omitempty"`

	// fix version
	FixVersion string `json:"fixVersion,omitempty"`

	// Unique ID for the vulnerabilityID and packageID combination.
	ID string `json:"id,omitempty"`

	// package ID
	PackageID string `json:"packageID,omitempty"`

	// package name
	PackageName string `json:"packageName,omitempty"`

	// package version
	PackageVersion string `json:"packageVersion,omitempty"`

	// reporting scanners
	ReportingScanners []string `json:"reportingScanners"`

	// severity
	Severity VulnerabilitySeverity `json:"severity,omitempty"`

	// source
	Source VulnerabilitySource `json:"source,omitempty"`

	// vulnerability ID
	VulnerabilityID string `json:"vulnerabilityID,omitempty"`

	// vulnerability name
	VulnerabilityName string `json:"vulnerabilityName,omitempty"`
}

// Validate validates this vulnerability
func (m *Vulnerability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCvssSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vulnerability) validateCvssSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.CvssSeverity) { // not required
		return nil
	}

	if err := m.CvssSeverity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cvssSeverity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cvssSeverity")
		}
		return err
	}

	return nil
}

func (m *Vulnerability) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	if err := m.Severity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("severity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("severity")
		}
		return err
	}

	return nil
}

func (m *Vulnerability) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if err := m.Source.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("source")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("source")
		}
		return err
	}

	return nil
}

// ContextValidate validate this vulnerability based on the context it is used
func (m *Vulnerability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCvssSeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vulnerability) contextValidateCvssSeverity(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CvssSeverity) { // not required
		return nil
	}

	if err := m.CvssSeverity.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cvssSeverity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cvssSeverity")
		}
		return err
	}

	return nil
}

func (m *Vulnerability) contextValidateSeverity(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	if err := m.Severity.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("severity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("severity")
		}
		return err
	}

	return nil
}

func (m *Vulnerability) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if err := m.Source.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("source")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("source")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Vulnerability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Vulnerability) UnmarshalBinary(b []byte) error {
	var res Vulnerability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
