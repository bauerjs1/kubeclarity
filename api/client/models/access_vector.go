// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AccessVector access vector
//
// swagger:model AccessVector
type AccessVector string

func NewAccessVector(value AccessVector) *AccessVector {
	v := value
	return &v
}

const (

	// AccessVectorNETWORK captures enum value "NETWORK"
	AccessVectorNETWORK AccessVector = "NETWORK"

	// AccessVectorADJACENT captures enum value "ADJACENT"
	AccessVectorADJACENT AccessVector = "ADJACENT"

	// AccessVectorLOCAL captures enum value "LOCAL"
	AccessVectorLOCAL AccessVector = "LOCAL"
)

// for schema
var accessVectorEnum []interface{}

func init() {
	var res []AccessVector
	if err := json.Unmarshal([]byte(`["NETWORK","ADJACENT","LOCAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessVectorEnum = append(accessVectorEnum, v)
	}
}

func (m AccessVector) validateAccessVectorEnum(path, location string, value AccessVector) error {
	if err := validate.EnumCase(path, location, value, accessVectorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this access vector
func (m AccessVector) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAccessVectorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this access vector based on context it is used
func (m AccessVector) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
