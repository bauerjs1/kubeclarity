// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Authentication authentication
//
// swagger:model Authentication
type Authentication string

func NewAuthentication(value Authentication) *Authentication {
	v := value
	return &v
}

const (

	// AuthenticationMULTIPLE captures enum value "MULTIPLE"
	AuthenticationMULTIPLE Authentication = "MULTIPLE"

	// AuthenticationSINGLE captures enum value "SINGLE"
	AuthenticationSINGLE Authentication = "SINGLE"

	// AuthenticationNONE captures enum value "NONE"
	AuthenticationNONE Authentication = "NONE"
)

// for schema
var authenticationEnum []interface{}

func init() {
	var res []Authentication
	if err := json.Unmarshal([]byte(`["MULTIPLE","SINGLE","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authenticationEnum = append(authenticationEnum, v)
	}
}

func (m Authentication) validateAuthenticationEnum(path, location string, value Authentication) error {
	if err := validate.EnumCase(path, location, value, authenticationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this authentication
func (m Authentication) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthenticationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this authentication based on context it is used
func (m Authentication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
