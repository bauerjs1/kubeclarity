// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetRuntimeScanProgressHandlerFunc turns a function with the right signature into a get runtime scan progress handler
type GetRuntimeScanProgressHandlerFunc func(GetRuntimeScanProgressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRuntimeScanProgressHandlerFunc) Handle(params GetRuntimeScanProgressParams) middleware.Responder {
	return fn(params)
}

// GetRuntimeScanProgressHandler interface for that can handle valid get runtime scan progress params
type GetRuntimeScanProgressHandler interface {
	Handle(GetRuntimeScanProgressParams) middleware.Responder
}

// NewGetRuntimeScanProgress creates a new http.Handler for the get runtime scan progress operation
func NewGetRuntimeScanProgress(ctx *middleware.Context, handler GetRuntimeScanProgressHandler) *GetRuntimeScanProgress {
	return &GetRuntimeScanProgress{Context: ctx, Handler: handler}
}

/*
	GetRuntimeScanProgress swagger:route GET /runtime/scan/progress getRuntimeScanProgress

Get scan progress
*/
type GetRuntimeScanProgress struct {
	Context *middleware.Context
	Handler GetRuntimeScanProgressHandler
}

func (o *GetRuntimeScanProgress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetRuntimeScanProgressParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
