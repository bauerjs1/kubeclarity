// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutRuntimeScanStopHandlerFunc turns a function with the right signature into a put runtime scan stop handler
type PutRuntimeScanStopHandlerFunc func(PutRuntimeScanStopParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutRuntimeScanStopHandlerFunc) Handle(params PutRuntimeScanStopParams) middleware.Responder {
	return fn(params)
}

// PutRuntimeScanStopHandler interface for that can handle valid put runtime scan stop params
type PutRuntimeScanStopHandler interface {
	Handle(PutRuntimeScanStopParams) middleware.Responder
}

// NewPutRuntimeScanStop creates a new http.Handler for the put runtime scan stop operation
func NewPutRuntimeScanStop(ctx *middleware.Context, handler PutRuntimeScanStopHandler) *PutRuntimeScanStop {
	return &PutRuntimeScanStop{Context: ctx, Handler: handler}
}

/*
	PutRuntimeScanStop swagger:route PUT /runtime/scan/stop putRuntimeScanStop

Stop a runtime scan
*/
type PutRuntimeScanStop struct {
	Context *middleware.Context
	Handler PutRuntimeScanStopHandler
}

func (o *PutRuntimeScanStop) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutRuntimeScanStopParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
