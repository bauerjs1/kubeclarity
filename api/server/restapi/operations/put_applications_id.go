// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutApplicationsIDHandlerFunc turns a function with the right signature into a put applications ID handler
type PutApplicationsIDHandlerFunc func(PutApplicationsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutApplicationsIDHandlerFunc) Handle(params PutApplicationsIDParams) middleware.Responder {
	return fn(params)
}

// PutApplicationsIDHandler interface for that can handle valid put applications ID params
type PutApplicationsIDHandler interface {
	Handle(PutApplicationsIDParams) middleware.Responder
}

// NewPutApplicationsID creates a new http.Handler for the put applications ID operation
func NewPutApplicationsID(ctx *middleware.Context, handler PutApplicationsIDHandler) *PutApplicationsID {
	return &PutApplicationsID{Context: ctx, Handler: handler}
}

/*
	PutApplicationsID swagger:route PUT /applications/{id} putApplicationsId

Update Application.
*/
type PutApplicationsID struct {
	Context *middleware.Context
	Handler PutApplicationsIDHandler
}

func (o *PutApplicationsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutApplicationsIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
