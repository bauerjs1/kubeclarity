// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostApplicationsHandlerFunc turns a function with the right signature into a post applications handler
type PostApplicationsHandlerFunc func(PostApplicationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostApplicationsHandlerFunc) Handle(params PostApplicationsParams) middleware.Responder {
	return fn(params)
}

// PostApplicationsHandler interface for that can handle valid post applications params
type PostApplicationsHandler interface {
	Handle(PostApplicationsParams) middleware.Responder
}

// NewPostApplications creates a new http.Handler for the post applications operation
func NewPostApplications(ctx *middleware.Context, handler PostApplicationsHandler) *PostApplications {
	return &PostApplications{Context: ctx, Handler: handler}
}

/*
	PostApplications swagger:route POST /applications postApplications

Create application
*/
type PostApplications struct {
	Context *middleware.Context
	Handler PostApplicationsHandler
}

func (o *PostApplications) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostApplicationsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
