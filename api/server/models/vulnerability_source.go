// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VulnerabilitySource vulnerability source
//
// swagger:model VulnerabilitySource
type VulnerabilitySource string

func NewVulnerabilitySource(value VulnerabilitySource) *VulnerabilitySource {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VulnerabilitySource.
func (m VulnerabilitySource) Pointer() *VulnerabilitySource {
	return &m
}

const (

	// VulnerabilitySourceCICD captures enum value "CICD"
	VulnerabilitySourceCICD VulnerabilitySource = "CICD"

	// VulnerabilitySourceRUNTIME captures enum value "RUNTIME"
	VulnerabilitySourceRUNTIME VulnerabilitySource = "RUNTIME"
)

// for schema
var vulnerabilitySourceEnum []interface{}

func init() {
	var res []VulnerabilitySource
	if err := json.Unmarshal([]byte(`["CICD","RUNTIME"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vulnerabilitySourceEnum = append(vulnerabilitySourceEnum, v)
	}
}

func (m VulnerabilitySource) validateVulnerabilitySourceEnum(path, location string, value VulnerabilitySource) error {
	if err := validate.EnumCase(path, location, value, vulnerabilitySourceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this vulnerability source
func (m VulnerabilitySource) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVulnerabilitySourceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this vulnerability source based on context it is used
func (m VulnerabilitySource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
