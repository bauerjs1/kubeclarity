// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AccessComplexity access complexity
//
// swagger:model AccessComplexity
type AccessComplexity string

func NewAccessComplexity(value AccessComplexity) *AccessComplexity {
	v := value
	return &v
}

const (

	// AccessComplexityLOW captures enum value "LOW"
	AccessComplexityLOW AccessComplexity = "LOW"

	// AccessComplexityMEDIUM captures enum value "MEDIUM"
	AccessComplexityMEDIUM AccessComplexity = "MEDIUM"

	// AccessComplexityHIGH captures enum value "HIGH"
	AccessComplexityHIGH AccessComplexity = "HIGH"
)

// for schema
var accessComplexityEnum []interface{}

func init() {
	var res []AccessComplexity
	if err := json.Unmarshal([]byte(`["LOW","MEDIUM","HIGH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessComplexityEnum = append(accessComplexityEnum, v)
	}
}

func (m AccessComplexity) validateAccessComplexityEnum(path, location string, value AccessComplexity) error {
	if err := validate.EnumCase(path, location, value, accessComplexityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this access complexity
func (m AccessComplexity) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAccessComplexityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this access complexity based on context it is used
func (m AccessComplexity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
